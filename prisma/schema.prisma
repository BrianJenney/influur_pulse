generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Active_Devices {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Active_Last_30_Days {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Conversion_Rate {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Crashes {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Deletions {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_First_Time_Downloads {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Impressions {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Impressions_Unique_Devices {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_In_App_Purchases {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Installations {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Paying_Users {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Proceeds {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Product_Page_Views {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Product_Page_Views_Unique_Devices {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Redownloads {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Sales {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Sessions {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Total_Downloads {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ASC_Updates {
  Date        DateTime? @db.DateTime(0)
  dimension   String?   @db.Text
  variable    String?   @db.Text
  metric      String?   @db.Text
  value       Float?
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model TikTokMediaInsights_temp_4774 {
  media_id                String?   @db.Text
  description             String?   @db.Text
  date_posted             DateTime? @db.DateTime(0)
  url                     String?   @db.Text
  thumbnail_url           String?   @db.Text
  music                   String?   @db.Text
  like_count              BigInt?
  comment_count           BigInt?
  play_count              BigInt?
  save                    String?   @db.Text
  share_count             BigInt?
  user_id                 BigInt?
  created_at              DateTime? @db.DateTime(0)
  updated_at              DateTime? @db.DateTime(0)
  retrieved_url           String?   @db.Text
  tiktok_user_insights_id BigInt?
  handle                  String?   @db.Text

  @@ignore
}

model album_artists {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  artist_id  BigInt    @db.UnsignedBigInt
  album_id   BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  albums     albums    @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_artist_album_id_foreign")
  artists    artists   @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_artist_artist_id_foreign")

  @@index([album_id], map: "album_artist_album_id_foreign")
  @@index([artist_id], map: "album_artist_artist_id_foreign")
}

model album_songs {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  song_id    BigInt    @db.UnsignedBigInt
  album_id   BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  albums     albums    @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_song_album_id_foreign")
  songs      songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_song_song_id_foreign")

  @@index([album_id], map: "album_song_album_id_foreign")
  @@index([song_id], map: "album_song_song_id_foreign")
}

model albums {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name            String          @db.VarChar(255)
  record_label_id BigInt          @db.UnsignedBigInt
  created_at      DateTime?       @default(now()) @db.Timestamp(0)
  updated_at      DateTime?       @default(now()) @db.Timestamp(0)
  deleted_at      DateTime?       @db.Timestamp(0)
  image           String?         @db.VarChar(1024)
  album_artists   album_artists[]
  album_songs     album_songs[]
  record_labels   record_labels   @relation(fields: [record_label_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "albums_ibfk_1")

  @@index([record_label_id], map: "record_label_id")
}

model alembic_version {
  version_num String @id @db.VarChar(32)
}

model app_event_types_deprecate {
  id             BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  app_section_id BigInt? @db.UnsignedBigInt
  name           String  @db.VarChar(255)
  description    String  @db.VarChar(255)
  info_keys      Json?
}

model app_events_deprecate {
  id                BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  app_event_type_id BigInt   @db.UnsignedBigInt
  created_at        DateTime @db.Timestamp(0)
  user_id           BigInt   @db.UnsignedBigInt
  to_user_id        BigInt?  @db.UnsignedBigInt
  info              Json?
}

model app_sections {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  section_name String @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model apple_store_data {
  Date                 DateTime? @db.DateTime(0)
  Total_Downloads      Float?    @map("Total Downloads")
  Redownloads          Float?
  First_Time_Downloads Float?    @map("First-Time Downloads")
  Installations        Float?

  @@ignore
}

model artist_song {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  artist_id  BigInt    @db.UnsignedBigInt
  song_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  artists    artists   @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_song_ibfk_1")
  songs      songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_song_ibfk_2")

  @@index([artist_id], map: "artist_id")
  @@index([song_id], map: "song_id")
}

model artists {
  id                         BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                       String                  @db.VarChar(255)
  country                    String                  @db.VarChar(255)
  record_label_id            BigInt                  @db.UnsignedBigInt
  spotify_artist_insights_id BigInt                  @db.UnsignedBigInt
  created_at                 DateTime?               @default(now()) @db.Timestamp(0)
  updated_at                 DateTime?               @default(now()) @db.Timestamp(0)
  deleted_at                 DateTime?               @db.Timestamp(0)
  album_artists              album_artists[]
  artist_song                artist_song[]
  record_labels              record_labels           @relation(fields: [record_label_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artists_ibfk_1")
  spotify_artist_insights    spotify_artist_insights @relation(fields: [spotify_artist_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artists_ibfk_2")
  metric_source_artists      metric_source_artists[]

  @@index([record_label_id], map: "record_label_id")
  @@index([spotify_artist_insights_id], map: "spotify_artist_insights_id")
}

model audience_gender {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  audience_id BigInt?    @db.UnsignedBigInt
  gender_id   BigInt?    @db.UnsignedBigInt
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  updated_at  DateTime?  @default(now()) @db.Timestamp(0)
  deleted_at  DateTime?  @db.DateTime(0)
  audiences   audiences? @relation(fields: [audience_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_gender_audience_id_foreign")
  genders     genders?   @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_gender_gender_id_foreign")

  @@index([audience_id], map: "audience_gender_audience_id_index")
  @@index([gender_id], map: "audience_gender_gender_id_index")
}

model audience_industry {
  id          BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  audience_id BigInt?     @db.UnsignedBigInt
  industry_id BigInt?     @db.UnsignedBigInt
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  deleted_at  DateTime?   @db.DateTime(0)
  audiences   audiences?  @relation(fields: [audience_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_industry_audience_id_foreign")
  industries  industries? @relation(fields: [industry_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_industry_industry_id_foreign")

  @@index([audience_id], map: "audience_industry_audience_id_index")
  @@index([industry_id], map: "audience_industry_industry_id_index")
}

model audience_languages {
  id               BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name             String?     @db.VarChar(255)
  short_code       String?     @db.VarChar(255)
  created_at       DateTime?   @default(now()) @db.Timestamp(0)
  updated_at       DateTime?   @default(now()) @db.Timestamp(0)
  translation_code String?     @db.VarChar(255)
  language_id      BigInt?     @db.UnsignedBigInt
  deleted_at       DateTime?   @db.DateTime(0)
  audiences        audiences[]

  @@index([language_id], map: "audience_languages_language_id_foreign")
}

model audience_location {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  location_id BigInt?    @db.UnsignedBigInt
  audience_id BigInt?    @db.UnsignedBigInt
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  updated_at  DateTime?  @default(now()) @db.Timestamp(0)
  deleted_at  DateTime?  @db.DateTime(0)
  audiences   audiences? @relation(fields: [audience_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_location_audience_id_foreign")
  locations   locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_location_location_id_foreign")

  @@index([audience_id], map: "audience_location_audience_id_index")
  @@index([location_id], map: "audience_location_location_id_index")
}

model audience_post_price {
  id                 BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  influencer_type_id BigInt          @db.UnsignedBigInt
  job_items_types_id BigInt          @db.UnsignedBigInt
  min_follower_count Int?
  max_follower_count Int?
  price              Decimal         @db.Decimal(10, 2)
  deleted_at         DateTime?       @db.Timestamp(0)
  created_at         DateTime?       @db.Timestamp(0)
  updated_at         DateTime?       @db.Timestamp(0)
  location_id        BigInt          @db.UnsignedBigInt
  influencer_type    influencer_type @relation(fields: [influencer_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_post_price_influencer_type_id_foreign")
  jobitemtypes       jobitemtypes    @relation(fields: [job_items_types_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_post_price_job_items_types_id_foreign")
  locations          locations       @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audience_post_price_location_id_foreign")

  @@index([influencer_type_id], map: "audience_post_price_influencer_type_id_foreign")
  @@index([job_items_types_id], map: "audience_post_price_job_items_types_id_foreign")
  @@index([location_id], map: "audience_post_price_location_id_foreign")
}

model audiences {
  id                   BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  audience_language_id BigInt?             @db.UnsignedBigInt
  location_id          BigInt?             @db.UnsignedBigInt
  industry_id          BigInt?             @db.UnsignedBigInt
  age_from             Int?                @db.UnsignedInt
  age_to               Int?                @db.UnsignedInt
  gender_id            BigInt?             @db.UnsignedBigInt
  created_at           DateTime?           @default(now()) @db.Timestamp(0)
  updated_at           DateTime?           @default(now()) @db.Timestamp(0)
  deleted_at           DateTime?           @db.Timestamp(0)
  audience_gender      audience_gender[]
  audience_industry    audience_industry[]
  audience_location    audience_location[]
  audience_languages   audience_languages? @relation(fields: [audience_language_id], references: [id], onDelete: Cascade, map: "audiences_audience_language_id_foreign")
  industries           industries?         @relation(fields: [industry_id], references: [id], onDelete: Cascade, map: "audiences_industry_id_foreign")
  locations            locations?          @relation(fields: [location_id], references: [id], onDelete: Cascade, map: "audiences_location_id_foreign")
  lwts                 lwts[]

  @@index([audience_language_id], map: "audiences_audience_language_id_foreign")
  @@index([industry_id], map: "audiences_industry_id_foreign")
  @@index([location_id], map: "audiences_location_id_foreign")
}

model block_users {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  blocking_user_id BigInt?   @db.UnsignedBigInt
  blocked_user_id  BigInt?   @db.UnsignedBigInt
  reason           String?   @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

model brand_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  brand_id   BigInt
  user_id    BigInt
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model brands {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @unique(map: "brands_name_unique") @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model brands_home_categories {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  order                         Int?
  type                          String                          @db.VarChar(255)
  icon                          String?                         @db.VarChar(255)
  query                         String                          @db.Text
  simple_query                  String?                         @db.Text
  banner_url                    String?                         @db.VarChar(255)
  hidden                        Boolean
  extra_behavior                String?                         @db.VarChar(255)
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  brands_home_categories_titles brands_home_categories_titles[]
}

model brands_home_categories_titles {
  id                     BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  category_id            BigInt                 @db.UnsignedBigInt
  title_en               String                 @db.VarChar(255)
  title_es               String                 @db.VarChar(255)
  title_code             String                 @db.VarChar(255)
  query                  String?                @db.Text
  created_at             DateTime?              @db.Timestamp(0)
  updated_at             DateTime?              @db.Timestamp(0)
  test_parameters        String?                @db.VarChar(255)
  brands_home_categories brands_home_categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brands_home_categories_titles_category_id_foreign")

  @@index([category_id], map: "brands_home_categories_titles_category_id_foreign")
}

model brands_home_curated_list_creators {
  id                        BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  curated_list_id           BigInt                    @db.UnsignedBigInt
  user_id                   BigInt                    @db.UnsignedBigInt
  created_at                DateTime?                 @db.Timestamp(0)
  updated_at                DateTime?                 @db.Timestamp(0)
  order                     Int                       @default(0)
  brands_home_curated_lists brands_home_curated_lists @relation(fields: [curated_list_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brands_home_curated_list_creators_curated_list_id_foreign")
  users                     users                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brands_home_curated_list_creators_user_id_foreign")

  @@index([curated_list_id], map: "brands_home_curated_list_creators_curated_list_id_foreign")
  @@index([user_id], map: "brands_home_curated_list_creators_user_id_foreign")
}

model brands_home_curated_lists {
  id                                BigInt                              @id @default(autoincrement()) @db.UnsignedBigInt
  name                              String                              @db.VarChar(255)
  created_at                        DateTime?                           @db.Timestamp(0)
  updated_at                        DateTime?                           @db.Timestamp(0)
  brands_home_curated_list_creators brands_home_curated_list_creators[]
}

model brands_waitlist {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt?   @db.UnsignedBigInt
  email        String    @db.VarChar(255)
  phone_number String?   @db.VarChar(255)
  status       String?   @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model campaign_audio_links {
  id                                 BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  campaign_id                        BigInt?                           @db.UnsignedBigInt
  campaign_audio_link_type_id        BigInt                            @db.UnsignedBigInt
  link                               String?                           @db.VarChar(255)
  created_at                         DateTime?                         @default(now()) @db.Timestamp(0)
  updated_at                         DateTime?                         @default(now()) @db.Timestamp(0)
  start_time                         DateTime?                         @db.Time(0)
  end_time                           DateTime?                         @db.Time(0)
  is_active                          Boolean                           @default(true)
  deleted_at                         DateTime?                         @db.Timestamp(0)
  lwt_id                             BigInt?                           @db.UnsignedBigInt
  campaign_audio_links_table_type_id BigInt?                           @db.UnsignedBigInt
  campaign_audio_links_types         campaign_audio_links_types        @relation(fields: [campaign_audio_link_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_audio_links_campaign_audio_link_type_id_foreign")
  campaign_audio_links_table_types   campaign_audio_links_table_types? @relation(fields: [campaign_audio_links_table_type_id], references: [id], onUpdate: NoAction, map: "campaign_audio_links_campaign_audio_links_table_type_id_foreign")
  jobs                               jobs?                             @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_audio_links_job_id_foreign")
  lwts                               lwts?                             @relation(fields: [lwt_id], references: [id], onUpdate: NoAction, map: "campaign_audio_links_lwt_id_foreign")

  @@index([campaign_audio_link_type_id], map: "campaign_audio_links_campaign_audio_link_type_id_foreign")
  @@index([campaign_audio_links_table_type_id], map: "campaign_audio_links_campaign_audio_links_table_type_id_foreign")
  @@index([campaign_id], map: "campaign_audio_links_job_id_foreign")
  @@index([lwt_id], map: "campaign_audio_links_lwt_id_foreign")
}

model campaign_audio_links_table_types {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  description          String                 @db.VarChar(255)
  created_at           DateTime?              @default(now()) @db.Timestamp(0)
  updated_at           DateTime?              @default(now()) @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  campaign_audio_links campaign_audio_links[]
}

model campaign_audio_links_types {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(50)
  translation_code     String                 @db.VarChar(255)
  created_at           DateTime?              @default(now()) @db.Timestamp(0)
  updated_at           DateTime?              @default(now()) @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  campaign_audio_links campaign_audio_links[]
}

model campaign_flavours {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  campaign_id BigInt    @db.UnsignedBigInt
  flavour_id  BigInt    @db.UnsignedBigInt
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  flavours    flavours  @relation(fields: [flavour_id], references: [id], onDelete: Cascade, map: "campaign_flavours_flavour_id_foreign")
  jobs        jobs      @relation(fields: [campaign_id], references: [id], onDelete: Cascade, map: "campaign_flavours_job_id_foreign")

  @@index([flavour_id], map: "campaign_flavours_flavour_id_foreign")
  @@index([campaign_id], map: "campaign_flavours_job_id_foreign")
}

model campaign_goals {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model campaign_kpis {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  campaign_id           BigInt    @db.UnsignedBigInt
  influencer_budget     Float?
  campaign_fee          Float?
  cost_per_mille        Float?
  cost_per_click        Float?
  cost_per_engagement   Float?
  total_engagements     BigInt?   @db.UnsignedBigInt
  total_reach           BigInt?   @db.UnsignedBigInt
  total_views           BigInt?   @db.UnsignedBigInt
  engagement_rate       Float?
  engagements_per_reach Float?
  created_at            DateTime  @default(now()) @db.Timestamp(0)
  updated_at            DateTime  @default(now()) @db.Timestamp(0)
  deleted_at            DateTime? @db.Timestamp(0)
  campaigns             campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, map: "campaign_kpis_campaign_id_foreign")

  @@index([campaign_id], map: "campaign_kpis_campaign_id_foreign")
}

model campaign_media {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  campaign_id BigInt    @db.UnsignedBigInt
  media_id    String    @db.VarChar(255)
  platform    String    @db.VarChar(50)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  campaigns   campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, map: "campaign_media_campaign_id_foreign")

  @@index([campaign_id], map: "campaign_media_campaign_id_foreign")
}

model campaign_request_deposit_statuses {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model campaign_requests {
  id                       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name                     String    @db.VarChar(255)
  business_name            String    @db.VarChar(255)
  business_link            String    @db.VarChar(255)
  campaign_goal            String    @db.VarChar(255)
  email                    String    @db.VarChar(255)
  content_for              String    @db.VarChar(255)
  stripe_session_id        String?   @db.VarChar(255)
  stripe_payment_intent_id String?   @db.VarChar(255)
  details                  String    @db.Text
  target_audience          String    @db.Text
  ship_product             Boolean   @default(false)
  inspiration              String?   @db.Text
  deposit_status_id        BigInt?   @db.UnsignedBigInt
  influencer_id            BigInt?   @db.UnsignedBigInt
  package_id               BigInt?   @db.UnsignedBigInt
  admin_dashboard_user_id  BigInt?   @db.UnsignedBigInt
  lwts_id                  BigInt?   @db.UnsignedBigInt
  brand_id                 BigInt?   @db.UnsignedBigInt
  created_at               DateTime? @db.Timestamp(0)
  updated_at               DateTime? @db.Timestamp(0)
}

model campaign_video_link_types {
  id                  BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  name                String               @db.VarChar(255)
  translation_code    String               @db.VarChar(255)
  is_active           Boolean              @default(true)
  created_at          DateTime             @default(now()) @db.Timestamp(0)
  updated_at          DateTime             @default(now()) @db.Timestamp(0)
  is_content_type_tag Boolean              @default(false)
  deleted_at          DateTime?            @db.Timestamp(0)
  user_content_types  user_content_types[]
}

model campaign_video_links {
  id                                 BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  campaign_id                        BigInt?                           @db.UnsignedBigInt
  link                               String?                           @db.VarChar(255)
  campaign_video_link_type_id        BigInt?                           @db.UnsignedBigInt
  created_at                         DateTime                          @default(now()) @db.Timestamp(0)
  updated_at                         DateTime                          @default(now()) @db.Timestamp(0)
  lwt_id                             BigInt?                           @db.UnsignedBigInt
  campaign_video_links_table_type_id BigInt?                           @db.UnsignedBigInt
  jobs                               jobs?                             @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_video_links_campaign_id_foreign")
  campaign_video_links_table_types   campaign_video_links_table_types? @relation(fields: [campaign_video_links_table_type_id], references: [id], onUpdate: NoAction, map: "campaign_video_links_campaign_video_links_table_type_id_foreign")
  lwts                               lwts?                             @relation(fields: [lwt_id], references: [id], onUpdate: NoAction, map: "campaign_video_links_lwt_id_foreign")

  @@index([campaign_id], map: "campaign_video_links_campaign_id_foreign")
  @@index([campaign_video_links_table_type_id], map: "campaign_video_links_campaign_video_links_table_type_id_foreign")
  @@index([lwt_id], map: "campaign_video_links_lwt_id_foreign")
}

model campaign_video_links_table_types {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  description          String                 @db.VarChar(255)
  created_at           DateTime?              @default(now()) @db.Timestamp(0)
  updated_at           DateTime?              @default(now()) @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  campaign_video_links campaign_video_links[]
}

model campaigns {
  id                   BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  campaign_name        String           @db.VarChar(100)
  campaign_description String?          @db.VarChar(255)
  campaign_start_date  DateTime         @db.DateTime(0)
  campaign_end_date    DateTime         @db.DateTime(0)
  deleted_at           DateTime?        @db.Timestamp(0)
  created_at           DateTime?        @default(now()) @db.Timestamp(0)
  updated_at           DateTime?        @default(now()) @db.Timestamp(0)
  campaign_goal_id     BigInt?          @db.UnsignedBigInt
  campaign_kpis        campaign_kpis[]
  campaign_media       campaign_media[]
  job_goals            job_goals?       @relation(fields: [campaign_goal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaigns_campaign_goal_id_foreign")
  jobs                 jobs[]
  lwts                 lwts[]

  @@index([campaign_goal_id], map: "campaigns_campaign_goal_id_foreign")
}

model chat_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  chat_id    BigInt
  user_id    BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  hided      BigInt?   @default(0) @db.UnsignedBigInt
}

model chats {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name         String?   @db.VarChar(255)
  is_group     Int       @default(0)
  user_id      BigInt?   @db.UnsignedBigInt
  last_updated BigInt    @default(0) @db.UnsignedBigInt
  deleted_at   DateTime? @db.Timestamp(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  lwts         Int       @default(0)

  @@index([user_id], map: "chats_user_id_index")
}

model comment_file {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id BigInt    @db.UnsignedBigInt
  file_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model comment_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id BigInt    @db.UnsignedBigInt
  link_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model comments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  post_id    BigInt?   @db.UnsignedBigInt
  parent_id  BigInt?   @db.UnsignedBigInt
  body       String?   @db.Text
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model company_position {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  position         String    @unique(map: "company_position_position_unique") @db.VarChar(255)
  order            Int       @unique(map: "company_position_order_unique")
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  translation_code String?   @db.VarChar(255)
}

model configuration {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  key        String    @unique(map: "configuration_key_unique") @db.VarChar(255)
  value      String    @db.VarChar(1500)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model connections {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  sender_id  BigInt?   @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  status     Int       @default(0)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model constants {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  constant_name String?   @db.VarChar(255)
  constant_key  BigInt?   @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model content_deliverable_prices {
  id                          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  price                       Decimal @db.Decimal(8, 2)
  content_deliverable_type_id BigInt  @db.UnsignedBigInt
  price_region_id             BigInt  @db.UnsignedBigInt
}

model content_deliverable_types {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  description               String?                     @db.Text
  socialnetwork_id          BigInt?                     @db.UnsignedBigInt
  is_active                 Boolean                     @default(false)
  created_at                DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at                DateTime?                   @default(now()) @db.Timestamp(0)
  deleted_at                DateTime?                   @db.Timestamp(0)
  socialnetworks            socialnetworks?             @relation(fields: [socialnetwork_id], references: [id], onUpdate: NoAction, map: "content_deliverable_types_socialnetwork_id_foreign")
  rate_package_deliverables rate_package_deliverables[]

  @@index([socialnetwork_id], map: "content_deliverable_types_socialnetwork_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model cost_estimates {
  username                      String? @db.VarChar(255)
  tiktok_video_txns             Decimal @default(0) @db.Decimal(42, 0)
  tiktok_video_payments         Float   @default(0)
  avg_tiktok_video_cost         Float?
  tiktok_instareel_txns         Decimal @default(0) @db.Decimal(42, 0)
  tiktok_instareel_payments     Float   @default(0)
  avg_tiktok_instareel_cost     Float?
  tiktok_instastory_txns        Decimal @default(0) @db.Decimal(42, 0)
  tiktok_instastory_payments    Float   @default(0)
  avg_tiktok_instastory_cost    Float?
  instareel_txns                Decimal @default(0) @db.Decimal(42, 0)
  instareel_payments            Float   @default(0)
  avg_instareel_cost            Float?
  instareel_instastory_txns     Decimal @default(0) @db.Decimal(42, 0)
  instareel_instastory_payments Float   @default(0)
  avg_instareel_instastory_cost Float?
  instastory_txns               Decimal @default(0) @db.Decimal(42, 0)
  instastory_payments           Float   @default(0)
  avg_instastory_cost           Float?
  all_three_txns                Decimal @default(0) @db.Decimal(42, 0)
  all_three_payments            Float   @default(0)
  avg_all_three_cost            Float?
  total_tpv                     Float?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model country_details {
  name                     String? @db.Text
  alpha_2                  String? @db.Text
  alpha_3                  String? @db.Text
  country_code             BigInt?
  iso_3166_2               String? @db.Text
  region                   String? @db.Text
  sub_region               String? @db.Text
  intermediate_region      String? @db.Text
  region_code              Float?
  sub_region_code          Float?
  intermediate_region_code Float?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model country_region_lang {
  Country        String? @db.Text
  Region         String? @db.Text
  speaks_Spanish String? @db.Text
  speaks_English String? @db.Text
  speaks_both    String? @db.Text

  @@ignore
}

model coupon_emails {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email        String    @db.VarChar(255)
  phone_number String?   @db.VarChar(255)
  name         String?   @db.VarChar(255)
  status       String?   @db.VarChar(255)
  user_id      BigInt?   @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model creators_waitlist {
  id                       BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                  BigInt
  status_id                BigInt                   @db.UnsignedBigInt
  created_at               DateTime?                @db.Timestamp(0)
  updated_at               DateTime?                @db.Timestamp(0)
  status_creators_waitlist status_creators_waitlist @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "creators_waitlist_status_id_foreign")

  @@index([status_id], map: "creators_waitlist_status_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model data_bible_influur {
  user_id       BigInt?
  count_lwts    String? @db.Text
  count_reviews Float?
  avg_rating    String? @db.Text
  created_at    String? @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model data_modash_audience_insta {
  user_id       String? @db.Text
  response      String? @db.Text
  lang_1_n      String? @db.Text
  lang_1_v      String? @db.Text
  lang_2_n      String? @db.Text
  lang_2_v      String? @db.Text
  ethn_1_n      String? @db.Text
  ethn_1_v      String? @db.Text
  ethn_2_n      String? @db.Text
  ethn_2_v      String? @db.Text
  male          String? @db.Text
  female        String? @db.Text
  Countries_1_n String? @db.Text
  Countries_1_w String? @db.Text
  Countries_2_n String? @db.Text
  Countries_2_w String? @db.Text
  Countries_3_n String? @db.Text
  Countries_3_w String? @db.Text
  Cities_1_n    String? @db.Text
  Cities_1_w    String? @db.Text
  Cities_2_n    String? @db.Text
  Cities_2_w    String? @db.Text
  Cities_3_n    String? @db.Text
  Cities_3_w    String? @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 13-17 String? @map("13-17") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 18-24 String? @map("18-24") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 25-34 String? @map("25-34") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 35-44 String? @map("35-44") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 45-64 String? @map("45-64") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 65- String? @map("65-") @db.Text
  created_at    String? @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model data_modash_audience_tt {
  user_id       String? @db.Text
  response      String? @db.Text
  lang_1_n      String? @db.Text
  lang_1_v      String? @db.Text
  lang_2_n      String? @db.Text
  lang_2_v      String? @db.Text
  male          String? @db.Text
  female        String? @db.Text
  Countries_1_n String? @db.Text
  Countries_1_w String? @db.Text
  Countries_2_n String? @db.Text
  Countries_2_w String? @db.Text
  Countries_3_n String? @db.Text
  Countries_3_w String? @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 13-17 String? @map("13-17") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 18-24 String? @map("18-24") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 25-34 String? @map("25-34") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 35-44 String? @map("35-44") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 45-64 String? @map("45-64") @db.Text
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // 65- String? @map("65-") @db.Text
  created_at    String? @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model data_modash_instagram {
  user_id         String? @db.Text
  response        String? @db.Text
  username        String? @db.Text
  followers       BigInt?
  engagement_rate Float?
  media_count     BigInt?
  avg_views       BigInt?
  following       BigInt?
  er_p            Float?
  created_at      String? @db.Text

  @@ignore
}

model data_price {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  min_value Int?    @db.SmallInt
  max_value Int?    @db.SmallInt
  original  String? @db.VarChar(30)
}

model data_stripe_refunds {
  id                       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  stripe_id                String?   @db.Text
  amount                   Float?
  balance_transaction      String?   @db.Text
  charge                   String?   @db.Text
  created                  DateTime? @db.DateTime(0)
  currency                 String?   @db.Text
  object                   String?   @db.Text
  payment_intent           String?   @db.Text
  reason                   String?   @db.Text
  receipt_number           String?   @db.Text
  source_transfer_reversal String?   @db.Text
  status                   String?   @db.Text
  transfer_reversal        String?   @db.Text
  created_etl              String?   @db.Text
}

model data_stripe_transactions {
  id                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  stripe_id            String?   @db.Text
  type                 String?   @db.Text
  source               String?   @db.Text
  amount               Float?
  fee                  Float?
  net                  Float?
  currency             String?   @db.Text
  created              DateTime? @db.DateTime(0)
  available_on         DateTime? @db.DateTime(0)
  description          String?   @db.Text
  cust_facing_amount   Float?
  cust_facing_currency String?   @db.Text
  created_etl          DateTime? @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model data_test_stripe {
  id                   String?   @db.Text
  type                 String?   @db.Text
  source               String?   @db.Text
  amount               Float?
  fee                  Float?
  dest_platform_fee    String?   @db.Text
  net                  Float?
  currency             String?   @db.Text
  created              DateTime? @db.DateTime(0)
  available_on         DateTime? @db.DateTime(0)
  description          String?   @db.Text
  cust_facing_amount   Float?
  cust_facing_currency String?   @db.Text
  transfer             String?   @db.Text
  transfer_date        String?   @db.Text
  transfer_group       String?   @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model data_testing_lwt_statuses {
  lwt_id              BigInt    @default(0) @db.UnsignedBigInt
  unique_id           String?   @db.VarChar(26)
  job_userid          Decimal?  @default(0) @db.Decimal(20, 0)
  job_username        String?   @db.VarChar(255)
  influencer_id       String?   @db.VarChar(21)
  influencer_username String?   @db.VarChar(255)
  status              Int       @default(0)
  latest_stage        String?   @db.VarChar(251)
  job_created_at      DateTime? @db.Timestamp(0)
  lwt_created_at      DateTime? @db.Timestamp(0)
  lwt_updated_at      DateTime? @db.Timestamp(0)
  publish_date        DateTime? @db.Date
  activity            String?   @db.VarChar(255)
  activity_date       DateTime  @db.Timestamp(0)
  day_diff            BigInt?
  rn                  BigInt    @default(0) @db.UnsignedBigInt

  @@ignore
}

model data_waitlist {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  id_waitlist        BigInt?
  user_type          String?   @db.Text
  username           String?   @db.Text
  brand_name         String?   @db.Text
  website            String?   @db.Text
  budget             String?   @db.Text
  location           String?   @db.Text
  phone_number       String?   @db.Text
  phone_verified     BigInt?
  email              String?   @db.Text
  created_at         DateTime? @db.DateTime(0)
  updated_at         DateTime? @db.DateTime(0)
  username_original  String?   @db.Text
  created_at_date    String?   @db.Text
  created_at_hour    String?   @db.Text
  biography          String?   @db.Text
  instagram_id       String?   @db.Text
  follows_count      BigInt?
  followers_count    BigInt?
  media_count        BigInt?
  name               String?   @db.Text
  username_api       String?   @db.Text
  comments_count     Float?
  like_count         Float?
  media_er           Float?
  sum_comments_likes Float?
  er                 Float?
  created_at_etl     String?   @db.Text
}

model data_waitlist_total {
  id             BigInt                         @id @default(autoincrement()) @db.UnsignedBigInt
  user_type      data_waitlist_total_user_type?
  username       String?                        @db.VarChar(255)
  brand_name     String?                        @db.VarChar(255)
  website        String?                        @db.VarChar(255)
  budget         String?                        @db.VarChar(255)
  location       String                         @db.VarChar(255)
  phone_number   String                         @db.VarChar(255)
  phone_verified Boolean                        @default(false)
  email          String                         @unique(map: "waitlists_email_unique") @db.VarChar(255)
  created_at     DateTime?                      @db.Timestamp(0)
  updated_at     DateTime?                      @db.Timestamp(0)
  created_at_etl String?                        @db.Text
}

model delete_reasons {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  reason     BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  note       String?   @db.Text
}

model deliver_file {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  deliver_id BigInt?   @db.UnsignedBigInt
  file_id    BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model deliver_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  deliver_id BigInt?   @db.UnsignedBigInt
  link_id    BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model deliverable_file {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  deliverable_id BigInt?       @db.UnsignedBigInt
  file_id        BigInt?       @db.UnsignedBigInt
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?     @default(now()) @db.Timestamp(0)
  deleted_at     DateTime?     @db.Timestamp(0)
  deliverables   deliverables? @relation(fields: [deliverable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "deliverable_file_deliverable_id_foreign")
  files          files?        @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "deliverable_file_file_id_foreign")

  @@index([deliverable_id], map: "deliverable_file_deliverable_id_foreign")
  @@index([file_id], map: "deliverable_file_file_id_foreign")
}

model deliverable_link {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  deliverable_id BigInt?       @db.UnsignedBigInt
  link_id        BigInt?       @db.UnsignedBigInt
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  updated_at     DateTime?     @default(now()) @db.Timestamp(0)
  deleted_at     DateTime?     @db.Timestamp(0)
  deliverables   deliverables? @relation(fields: [deliverable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "deliverable_link_deliverable_id_foreign")
  links          links?        @relation(fields: [link_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "deliverable_link_link_id_foreign")

  @@index([deliverable_id], map: "deliverable_link_deliverable_id_foreign")
  @@index([link_id], map: "deliverable_link_link_id_foreign")
}

model deliverables {
  id                      BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  lwt_id                  BigInt?            @db.UnsignedBigInt
  file_id                 BigInt?            @db.UnsignedBigInt
  link_id                 BigInt?            @db.UnsignedBigInt
  status                  Int?
  created_at              DateTime?          @default(now()) @db.Timestamp(0)
  updated_at              DateTime?          @default(now()) @db.Timestamp(0)
  job_deliverable_id      BigInt?            @db.UnsignedBigInt
  note                    String?            @db.Text
  parent_id               BigInt?            @db.UnsignedBigInt
  caption                 String?            @db.Text
  extra_link              String?            @db.Text
  tags                    String?            @db.Text
  is_archive              Boolean            @default(false)
  request_note            String?            @db.Text
  request_note_created_at DateTime?          @db.Timestamp(0)
  deleted_at              DateTime?          @db.Timestamp(0)
  deliverable_file        deliverable_file[]
  deliverable_link        deliverable_link[]
  files                   files?             @relation(fields: [file_id], references: [id], onUpdate: NoAction, map: "deliverables_file_id_foreign")
  job_deliverables        job_deliverables?  @relation(fields: [job_deliverable_id], references: [id], onUpdate: NoAction, map: "deliverables_job_deliverable_id_foreign")
  links                   links?             @relation(fields: [link_id], references: [id], onUpdate: NoAction, map: "deliverables_link_id_foreign")
  lwts                    lwts?              @relation(fields: [lwt_id], references: [id], onUpdate: NoAction, map: "deliverables_lwt_id_foreign")
  deliverables            deliverables?      @relation("deliverablesTodeliverables", fields: [parent_id], references: [id], onUpdate: NoAction, map: "deliverables_parent_id_foreign")
  other_deliverables      deliverables[]     @relation("deliverablesTodeliverables")

  @@index([file_id], map: "deliverables_file_id_foreign")
  @@index([job_deliverable_id], map: "deliverables_job_deliverable_id_foreign")
  @@index([link_id], map: "deliverables_link_id_foreign")
  @@index([lwt_id], map: "deliverables_lwt_id_foreign")
  @@index([parent_id], map: "deliverables_parent_id_foreign")
}

model deliverables_statuses {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  status_key BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model delivers {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  text       String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model demo_table {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)
}

model devices {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int
  token      String?   @db.Text
  phone_os   Int?      @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model email_verification_codes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @unique(map: "email_verification_codes_email_unique") @db.VarChar(255)
  code       String    @db.Text
  expires_at DateTime? @db.DateTime(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model event_contact {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  event_id   BigInt?   @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  status     Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model event_industry {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  industry_id BigInt?
  event_id    BigInt?
  percentage  Float     @default(100)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model event_items {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  event_id        BigInt    @db.UnsignedBigInt
  jobitemstype_id BigInt    @db.UnsignedBigInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  quantity        BigInt?   @db.UnsignedBigInt
}

model event_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  event_id   Int
  link_id    Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model event_role {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  role_id    BigInt?
  event_id   BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model events {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title              String    @db.VarChar(255)
  user_id            BigInt    @db.UnsignedBigInt
  file_id            BigInt?   @db.UnsignedBigInt
  location_id        BigInt?   @db.UnsignedBigInt
  requirements       String?   @db.VarChar(255)
  description        String?   @db.Text
  start_date         DateTime? @db.Timestamp(0)
  end_date           DateTime? @db.Timestamp(0)
  number_spot        Int       @default(0)
  spot_status        Int       @default(0)
  deleted_at         DateTime? @db.Timestamp(0)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  collab_type        Int?      @default(0)
  relationship       Int?      @default(0)
  paid_type          Int?      @default(0)
  price_type         Int?      @default(0)
  price_tbd          Int?      @default(0)
  price_min          Float?    @default(0)
  price_max          Float?    @default(0)
  price_exact        Float?    @default(0)
  private            BigInt    @default(0) @db.UnsignedBigInt
  deleted            BigInt    @default(0) @db.UnsignedBigInt
  remaining_spots    Int?
  draft              BigInt?   @db.UnsignedBigInt
  draft_publishing   BigInt?   @db.UnsignedBigInt
  publish_date_start DateTime? @db.Date
  publish_date_end   DateTime? @db.Date
  exact              BigInt?   @db.UnsignedBigInt
  same_date          BigInt?   @db.UnsignedBigInt
  service_fee        Float     @default(0)
  transaction_fee    Float?
  bank_fee           Float?
  card_fee           Float?
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model faq_types {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name             String    @db.VarChar(255)
  translation_code String?   @db.VarChar(255)
  created_at       DateTime? @default(now()) @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  faqs             faqs[]
}

model faqs {
  id               BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  faq_type_id      BigInt?    @db.UnsignedBigInt
  question         String?    @db.Text
  answer           String?    @db.Text
  translation_code String?    @db.VarChar(255)
  created_at       DateTime?  @default(now()) @db.Timestamp(0)
  updated_at       DateTime?  @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?  @db.Timestamp(0)
  faq_types        faq_types? @relation(fields: [faq_type_id], references: [id], onUpdate: NoAction, map: "faqs_faq_type_id_foreign")

  @@index([faq_type_id], map: "faqs_faq_type_id_index")
}

model feed_comment {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  feed_id    BigInt
  user_id    BigInt
  body       String?   @db.VarChar(255)
  deleted    Int       @default(0) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model feed_file {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  file_id    BigInt
  feed_id    BigInt
  deleted    Int       @default(0) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model feed_like {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  feed_id    BigInt
  user_id    BigInt
  deleted    Int       @default(0) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model feed_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  feed_id    BigInt?
  link_id    BigInt?
  deleted    Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model feeds {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt
  location_id BigInt
  body        String    @db.VarChar(255)
  deleted     Int       @default(0) @db.TinyInt
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model file_event {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  file_id    BigInt?
  event_id   BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model file_events {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  file_id    BigInt
  event_id   BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model file_job {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  file_id    BigInt?
  job_id     BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model file_published_post_link {
  id                     BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  published_post_link_id BigInt?               @db.UnsignedBigInt
  file_id                BigInt?               @db.UnsignedBigInt
  created_at             DateTime?             @default(now()) @db.Timestamp(0)
  updated_at             DateTime?             @default(now()) @db.Timestamp(0)
  deleted_at             DateTime?             @db.Timestamp(0)
  files                  files?                @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "file_published_post_link_file_id_foreign")
  published_post_links   published_post_links? @relation(fields: [published_post_link_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "file_published_post_link_published_post_link_id_foreign")

  @@index([file_id], map: "file_published_post_link_file_id_foreign")
  @@index([published_post_link_id], map: "file_published_post_link_published_post_link_id_foreign")
}

model file_type {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model file_usages {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  files      files[]
}

model file_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt?
  file_id    BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model files {
  id                       BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  name                     String?                    @db.VarChar(255)
  type                     Int?
  size                     Float?
  local_path               String                     @db.VarChar(255)
  web_path                 String                     @db.VarChar(255)
  deleted                  Int                        @default(0) @db.TinyInt
  created_at               DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at               DateTime?                  @default(now()) @db.Timestamp(0)
  origin_name              String?                    @db.VarChar(255)
  format                   String?                    @db.VarChar(255)
  preview_url              String?                    @db.VarChar(255)
  correct_size             Float?
  file_usage_id            BigInt?                    @db.UnsignedBigInt
  deleted_at               DateTime?                  @db.Timestamp(0)
  deliverable_file         deliverable_file[]
  deliverables             deliverables[]
  file_published_post_link file_published_post_link[]
  file_usages              file_usages?               @relation(fields: [file_usage_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "files_file_usage_id_foreign")
  job_file                 job_file[]
  lwts                     lwts[]

  @@index([file_usage_id], map: "files_file_usage_id_foreign")
}

model final_result_file {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  final_result_id BigInt?   @db.UnsignedBigInt
  file_id         BigInt?   @db.UnsignedBigInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model final_result_link {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  final_result_id BigInt?   @db.UnsignedBigInt
  link_id         BigInt?   @db.UnsignedBigInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model final_results {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  text       String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model flavours {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  name              String              @db.VarChar(255)
  translation_code  String?             @db.VarChar(255)
  is_active         Boolean             @default(true)
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  updated_at        DateTime            @default(now()) @db.Timestamp(0)
  campaign_flavours campaign_flavours[]
}

model forgots {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  link         String?   @db.VarChar(255)
  status       String?   @db.VarChar(255)
  user_id      BigInt
  last_updated BigInt    @default(0) @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model genders {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name             String?           @db.VarChar(255)
  status           Int?
  created_at       DateTime?         @db.Timestamp(0)
  updated_at       DateTime?         @db.Timestamp(0)
  translation_code String?           @db.VarChar(255)
  audience_gender  audience_gender[]
}

model genres {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  name        String        @db.VarChar(255)
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  updated_at  DateTime?     @default(now()) @db.Timestamp(0)
  deleted_at  DateTime?     @db.Timestamp(0)
  song_genres song_genres[]
}

model goals {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model how_did_you_hear_about_us {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name             String    @unique(map: "how_did_you_hear_about_us_name_unique") @db.VarChar(255)
  order            Int       @unique(map: "how_did_you_hear_about_us_order_unique")
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  translation_code String?   @db.VarChar(255)
}

model industries {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  name                      String                      @db.VarChar(255)
  deleted_at                DateTime?                   @db.Timestamp(0)
  created_at                DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at                DateTime?                   @default(now()) @db.Timestamp(0)
  translation_code          String?                     @db.VarChar(255)
  name_es                   String?                     @db.VarChar(255)
  emoji                     String?                     @db.VarChar(255)
  audience_industry         audience_industry[]
  audiences                 audiences[]
  industry_group_industries industry_group_industries[]
  user_industry             user_industry[]
}

model industry_events {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  industry_id BigInt
  event_id    BigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model industry_group_industries {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  industry_group_id BigInt          @db.UnsignedBigInt
  industry_id       BigInt          @db.UnsignedBigInt
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  industry_groups   industry_groups @relation(fields: [industry_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "industry_group_industries_industry_group_id_foreign")
  industries        industries      @relation(fields: [industry_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "industry_group_industries_industry_id_foreign")

  @@index([industry_group_id], map: "industry_group_industries_industry_group_id_foreign")
  @@index([industry_id], map: "industry_group_industries_industry_id_foreign")
}

model industry_groups {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  name                      String                      @db.VarChar(255)
  translation_code          String                      @db.VarChar(255)
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  name_es                   String?                     @db.VarChar(255)
  industry_group_industries industry_group_industries[]
}

model influencer_type {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  name                String                @db.VarChar(255)
  description         String?               @db.VarChar(255)
  deleted_at          DateTime?             @db.Timestamp(0)
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  audience_post_price audience_post_price[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model influencity_categories {
  metric       String?   @db.Text
  value        String?   @db.Text
  account_id   String?   @db.Text
  sub_category String?   @db.Text
  source       String?   @db.Text
  UpdatedDate  DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model influencity_metrics {
  cohort      String?   @db.Text
  value       Float?
  metric      String?   @db.Text
  account_id  String?   @db.Text
  sub_cohort  String?   @db.Text
  source      String?   @db.Text
  UpdatedDate DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model influencity_pii {
  account_id       String?   @db.Text
  user_name        String?   @db.Text
  user_image       String?   @db.Text
  country          String?   @db.Text
  last_updated     String?   @db.Text
  followers        Float?
  following        Float?
  engagement       Float?
  earned_media     Float?
  avg_interactions Float?
  source           String?   @db.Text
  UpdatedDate      DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model influencity_userlists {
  username         String?   @db.Text
  avg_interactions Float?
  followers        Float?
  country          String?   @db.Text
  metric           String?   @db.Text
  account_id       String?   @db.Text
  source           String?   @db.Text
  UpdatedDate      DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model influur {
  id                     BigInt?   @db.UnsignedBigInt
  user_id                BigInt?   @db.UnsignedBigInt
  url                    String?   @db.VarChar(255)
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)
  meets_influur_criteria Int?      @db.TinyInt
  is_verified            Int?      @db.TinyInt

  @@ignore
}

model instagram_audiences_insights {
  id                                BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                           BigInt?                 @unique(map: "instagram_audiences_insights_user_id_unique") @db.UnsignedBigInt
  top_media_1_id                    String?                 @db.VarChar(255)
  top_media_2_id                    String?                 @db.VarChar(255)
  top_media_3_id                    String?                 @db.VarChar(255)
  commercial_media_1_id             String?                 @db.VarChar(255)
  commercial_media_2_id             String?                 @db.VarChar(255)
  commercial_media_3_id             String?                 @db.VarChar(255)
  country_1                         String?                 @db.VarChar(255)
  country_1_weight                  Float?                  @db.Float
  country_2                         String?                 @db.VarChar(255)
  country_2_weight                  Float?                  @db.Float
  country_3                         String?                 @db.VarChar(255)
  country_3_weight                  Float?                  @db.Float
  city_1                            String?                 @db.VarChar(255)
  city_1_weight                     Float?
  city_2                            String?                 @db.VarChar(255)
  city_2_weight                     Float?
  city_3                            String?                 @db.VarChar(255)
  city_3_weight                     Float?
  language_1                        String?                 @db.VarChar(255)
  language_1_weight                 Float?
  language_2                        String?                 @db.VarChar(255)
  language_2_weight                 Float?
  language_3                        String?                 @db.VarChar(255)
  language_3_weight                 Float?
  interest_1                        String?                 @db.VarChar(255)
  interest_2                        String?                 @db.VarChar(255)
  interest_3                        String?                 @db.VarChar(255)
  top_hashtag_1                     String?                 @db.VarChar(255)
  top_hashtag_1_weight              Float?
  top_hashtag_2                     String?                 @db.VarChar(255)
  top_hashtag_2_weight              Float?
  top_hashtag_3                     String?                 @db.VarChar(255)
  top_hashtag_3_weight              Float?
  similar_user_1                    String?                 @db.VarChar(255)
  similar_user_1_weight             Float?
  similar_user_2                    String?                 @db.VarChar(255)
  similar_user_2_weight             Float?
  similar_user_3                    String?                 @db.VarChar(255)
  similar_user_3_weight             Float?
  audience_type_1                   String?                 @db.VarChar(255)
  audience_type_1_weight            Float?
  audience_type_2                   String?                 @db.VarChar(255)
  audience_type_2_weight            Float?
  audience_type_3                   String?                 @db.VarChar(255)
  audience_type_3_weight            Float?
  audience_ethnicity_1              String?                 @db.VarChar(255)
  audience_ethnicity_1_weight       Float?
  audience_ethnicity_2              String?                 @db.VarChar(255)
  audience_ethnicity_2_weight       Float?
  audience_ethnicity_3              String?                 @db.VarChar(255)
  audience_ethnicity_3_weight       Float?
  audience_brand_affinity_1         String?                 @db.VarChar(255)
  audience_brand_affinity_1_weight  Float?
  audience_brand_affinity_2         String?                 @db.VarChar(255)
  audience_brand_affinity_2_weight  Float?
  audience_brand_affinity_3         String?                 @db.VarChar(255)
  audience_brand_affinity_3_weight  Float?
  audience_male_weight              Float?
  audience_female_weight            Float?
  audience_ages_male_13_17_weight   Float?
  audience_ages_female_13_17_weight Float?
  audience_ages_male_18_24_weight   Float?
  audience_ages_female_18_24_weight Float?
  audience_ages_male_25_34_weight   Float?
  audience_ages_female_25_34_weight Float?
  audience_ages_male_35_44_weight   Float?
  audience_ages_female_35_44_weight Float?
  audience_ages_male_45_64_weight   Float?
  audience_ages_female_45_64_weight Float?
  audience_ages_male_65_            Float?
  audience_ages_female_65_          Float?
  created_at                        DateTime?               @default(now()) @db.Timestamp(0)
  updated_at                        DateTime?               @default(now()) @db.Timestamp(0)
  instagram_user_insights_id        Int                     @unique(map: "instagram_audiences_insights_unique") @db.UnsignedInt
  deleted_at                        DateTime?               @db.Timestamp(0)
  instagram_user_insights           instagram_user_insights @relation(fields: [instagram_user_insights_id], references: [id], onDelete: Cascade, map: "instagram_audiences_insights_instagram_user_insights_FK")
  pulse_list_creator                pulse_list_creator[]

  @@index([created_at], map: "instagram_audiences_insights_created_at_IDX")
  @@index([updated_at], map: "instagram_audiences_insights_updated_at_IDX")
}

model instagram_comments_insights {
  id                          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id                  String    @unique(map: "instagram_comments_insights_comment_id_unique") @db.VarChar(255)
  media_id                    String    @db.VarChar(255)
  date_posted                 DateTime? @db.DateTime(0)
  handle                      String?   @db.VarChar(255)
  like_count                  Int?      @db.UnsignedInt
  reply_comment_count         Int?      @db.UnsignedInt
  text                        String?   @db.VarChar(2200)
  deleted_at                  DateTime? @db.Timestamp(0)
  created_at                  DateTime? @default(now()) @db.Timestamp(0)
  updated_at                  DateTime? @default(now()) @db.Timestamp(0)
  instagram_media_insights_id Int       @db.UnsignedInt

  @@index([created_at], map: "instagram_comments_insights_created_at_IDX")
  @@index([updated_at], map: "instagram_comments_insights_updated_at_IDX")
}

model instagram_content_price {
  id                          BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  song_csv_file_id            BigInt                   @db.UnsignedBigInt
  price                       Float
  is_valid_link               Boolean                  @default(false)
  instagram_media_insights_id String                   @db.VarChar(255)
  created_at                  DateTime?                @default(now()) @db.Timestamp(0)
  updated_at                  DateTime?                @default(now()) @db.Timestamp(0)
  deleted_at                  DateTime?                @db.Timestamp(0)
  song_csv_files              song_csv_files           @relation(fields: [song_csv_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "instagram_content_price_ibfk_1")
  instagram_media_insights    instagram_media_insights @relation(fields: [instagram_media_insights_id], references: [media_id], onDelete: NoAction, onUpdate: NoAction, map: "instagram_content_price_ibfk_2")

  @@index([instagram_media_insights_id], map: "instagram_media_insights_id")
  @@index([song_csv_file_id], map: "song_csv_file_id")
}

model instagram_media_insights {
  media_id                   String                    @id @db.VarChar(255)
  description                String?                   @db.VarChar(1024)
  date_posted                DateTime?                 @db.DateTime(0)
  url                        String?                   @db.VarChar(500)
  thumbnail_url              String?                   @db.VarChar(500)
  music                      String?                   @db.VarChar(500)
  media_type                 Int?                      @db.UnsignedInt
  like_count                 Int?                      @db.UnsignedInt
  comment_count              Int?                      @db.UnsignedInt
  play_count                 Int?                      @db.UnsignedInt
  save                       Int?                      @db.UnsignedInt
  share_count                Int?                      @db.UnsignedInt
  user_id                    Int                       @db.UnsignedInt
  created_at                 DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at                 DateTime?                 @default(now()) @db.Timestamp(0)
  retrieved_url              String?                   @db.VarChar(500)
  product_type               String?                   @db.VarChar(20)
  instagram_user_insights_id Int                       @db.UnsignedInt
  external_media_id          String                    @db.VarChar(255)
  reach                      Int?                      @db.UnsignedInt
  deleted_at                 DateTime?                 @db.Timestamp(0)
  instagram_content_price    instagram_content_price[]

  @@index([created_at], map: "instagram_media_insights_created_at_IDX")
  @@index([updated_at], map: "instagram_media_insights_updated_at_IDX")
  @@index([user_id], map: "instagram_media_insights_user_id_index")
}

model instagram_user_additional_info {
  id                         BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  handle                     String                   @db.VarChar(255)
  instagram_user_insights_id Int?                     @db.UnsignedInt
  gender                     String?                  @db.VarChar(255)
  location                   String?                  @db.VarChar(255)
  industries                 String?                  @db.VarChar(255)
  characteristics            String?                  @db.VarChar(255)
  rate_story                 Float?
  rate_reel                  Float?
  rate_post                  Float?
  rate_story_and_reel        Float?
  agency                     String?                  @db.VarChar(255)
  comments                   String?                  @db.VarChar(255)
  created_at                 DateTime?                @default(now()) @db.Timestamp(0)
  updated_at                 DateTime?                @default(now()) @db.Timestamp(0)
  deleted_at                 DateTime?                @db.Timestamp(0)
  instagram_user_insights    instagram_user_insights? @relation(fields: [instagram_user_insights_id], references: [id], onDelete: Cascade, map: "instagram_user_additional_info_instagram_user_insights_FK")

  @@index([created_at], map: "instagram_user_additional_info_created_at_IDX")
  @@index([instagram_user_insights_id], map: "instagram_user_additional_info_instagram_user_insights_FK")
  @@index([updated_at], map: "instagram_user_additional_info_updated_at_IDX")
}

model instagram_user_insights {
  user_id                            Int?                             @unique(map: "user_id") @db.UnsignedInt
  instagram_user_id                  BigInt?                          @db.UnsignedBigInt
  handle                             String                           @db.VarChar(50)
  followers                          BigInt                           @db.UnsignedBigInt
  following                          BigInt?                          @db.UnsignedBigInt
  engagement_rate                    Float?                           @db.Float
  is_influur_verified                Boolean
  meets_influur_criteria             Boolean
  id                                 Int                              @id @default(autoincrement()) @db.UnsignedInt
  created_at                         DateTime?                        @default(now()) @db.DateTime(0)
  updated_at                         DateTime?                        @default(now()) @db.DateTime(0)
  is_handle_not_found                Boolean                          @default(false)
  avg_likes                          Float?                           @db.Float
  avg_comments                       Float?                           @db.Float
  is_fan                             Boolean                          @default(false)
  external_user_id                   String?                          @db.VarChar(50)
  biography                          String?                          @db.VarChar(150)
  platform_token                     String?                          @db.VarChar(512)
  is_media_and_follower_insufficient Boolean                          @default(false)
  deleted_at                         DateTime?                        @db.Timestamp(0)
  instagram_audiences_insights       instagram_audiences_insights?
  instagram_user_additional_info     instagram_user_additional_info[]
  pulse_list_creator                 pulse_list_creator[]
  users                              users[]

  @@index([created_at], map: "instagram_user_insights_created_at_IDX")
  @@index([updated_at], map: "instagram_user_insights_updated_at_IDX")
}

model job_contact {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  job_id     BigInt
  user_id    BigInt
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model job_deliverables {
  id                             BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  job_id                         BigInt?                       @db.UnsignedBigInt
  content_deliverable_type_id    BigInt?                       @db.UnsignedBigInt
  publish_date_start             DateTime?                     @db.Date
  publish_date_end               DateTime?                     @db.Date
  draft_required                 Boolean                       @default(false)
  created_at                     DateTime?                     @default(now()) @db.Timestamp(0)
  updated_at                     DateTime?                     @default(now()) @db.Timestamp(0)
  draft_number                   BigInt                        @default(0) @db.UnsignedBigInt
  deleted_at                     DateTime?                     @db.Timestamp(0)
  is_boost_code_required         Boolean                       @default(false)
  job_deliverables_table_type_id BigInt?                       @db.UnsignedBigInt
  lwt_id                         BigInt?                       @db.UnsignedBigInt
  deliverables                   deliverables[]
  job_deliverables_table_types   job_deliverables_table_types? @relation(fields: [job_deliverables_table_type_id], references: [id], onUpdate: NoAction, map: "job_deliverables_job_deliverable_table_type_id_foreign")
  jobs                           jobs?                         @relation(fields: [job_id], references: [id], onUpdate: NoAction, map: "job_deliverables_job_id_foreign")
  lwts                           lwts?                         @relation(fields: [lwt_id], references: [id], onUpdate: NoAction, map: "job_deliverables_lwt_id_foreign")

  @@index([content_deliverable_type_id], map: "job_deliverables_content_deliverable_type_id_foreign")
  @@index([job_deliverables_table_type_id], map: "job_deliverables_job_deliverable_table_type_id_foreign")
  @@index([job_id], map: "job_deliverables_job_id_foreign")
  @@index([lwt_id], map: "job_deliverables_lwt_id_foreign")
}

model job_deliverables_table_types {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  description      String             @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?          @db.Timestamp(0)
  job_deliverables job_deliverables[]
}

model job_details {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tags                  String?   @db.VarChar(255)
  hashtags              String?   @db.VarChar(255)
  caption               String?   @db.VarChar(255)
  job_physical_location String?   @db.VarChar(255)
  job_physical_date     DateTime? @db.Timestamp(0)
  created_at            DateTime? @default(now()) @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)
  job_physical_date_end DateTime? @db.Timestamp(0)
  is_time_set           Boolean   @default(true)
  deleted_at            DateTime? @db.Timestamp(0)
  lwts                  lwts[]
}

model job_file {
  id                     BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  job_id                 BigInt                @db.UnsignedBigInt
  file_id                BigInt                @db.UnsignedBigInt
  deleted_at             DateTime?             @db.Timestamp(0)
  created_at             DateTime?             @db.Timestamp(0)
  updated_at             DateTime?             @db.Timestamp(0)
  lwt_id                 BigInt?               @db.UnsignedBigInt
  job_file_table_type_id BigInt?               @db.UnsignedBigInt
  files                  files                 @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_file_file_id_foreign")
  job_file_table_types   job_file_table_types? @relation(fields: [job_file_table_type_id], references: [id], onUpdate: NoAction, map: "job_file_job_file_table_type_id_foreign")
  jobs                   jobs                  @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_file_job_id_foreign")
  lwts                   lwts?                 @relation(fields: [lwt_id], references: [id], onUpdate: NoAction, map: "job_file_lwt_id_foreign")

  @@index([file_id], map: "job_file_file_id_foreign")
  @@index([job_file_table_type_id], map: "job_file_job_file_table_type_id_foreign")
  @@index([job_id], map: "job_file_job_id_foreign")
  @@index([lwt_id], map: "job_file_lwt_id_foreign")
}

model job_file_table_types {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  description String     @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  updated_at  DateTime?  @default(now()) @db.Timestamp(0)
  deleted_at  DateTime?  @db.Timestamp(0)
  job_file    job_file[]
}

model job_goals {
  id               BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name             String      @db.VarChar(255)
  description      String      @db.VarChar(255)
  created_at       DateTime?   @default(now()) @db.Timestamp(0)
  updated_at       DateTime?   @default(now()) @db.Timestamp(0)
  translation_code String?     @db.VarChar(255)
  active           BigInt      @default(0) @db.UnsignedBigInt
  deleted_at       DateTime?   @db.Timestamp(0)
  campaigns        campaigns[]
  jobs             jobs[]
  lwts             lwts[]
}

model job_industry {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  job_id      BigInt
  industry_id BigInt
  percentage  Float
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model job_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  job_id     BigInt
  link_id    BigInt
  deleted    Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model job_offer_notes {
  id                            BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  lwt_id                        BigInt?                      @db.UnsignedBigInt
  job_id                        BigInt?                      @db.UnsignedBigInt
  owner_id                      BigInt?                      @db.UnsignedBigInt
  note                          String?                      @db.Text
  created_at                    DateTime?                    @db.Timestamp(0)
  updated_at                    DateTime?                    @db.Timestamp(0)
  job_offer_notes_table_type_id BigInt?                      @db.UnsignedBigInt
  jobs                          jobs?                        @relation(fields: [job_id], references: [id], onUpdate: NoAction, map: "job_offer_notes_job_id_foreign")
  job_offer_notes_table_types   job_offer_notes_table_types? @relation(fields: [job_offer_notes_table_type_id], references: [id], onUpdate: NoAction, map: "job_offer_notes_job_offer_notes_table_type_id_foreign")
  lwts                          lwts?                        @relation(fields: [lwt_id], references: [id], onUpdate: NoAction, map: "job_offer_notes_lwt_id_foreign")
  users                         users?                       @relation(fields: [owner_id], references: [id], onUpdate: NoAction, map: "job_offer_notes_owner_id_foreign")

  @@index([job_id], map: "job_offer_notes_job_id_foreign")
  @@index([job_offer_notes_table_type_id], map: "job_offer_notes_job_offer_notes_table_type_id_foreign")
  @@index([lwt_id], map: "job_offer_notes_lwt_id_foreign")
  @@index([owner_id], map: "job_offer_notes_owner_id_foreign")
}

model job_offer_notes_table_types {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  description     String            @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  deleted_at      DateTime?         @db.Timestamp(0)
  job_offer_notes job_offer_notes[]
}

model job_requirement_followers {
  id                 BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  job_id             BigInt         @db.UnsignedBigInt
  socialnetwork_id   BigInt         @db.UnsignedBigInt
  follower_count_min BigInt         @db.UnsignedBigInt
  created_at         DateTime?      @db.Timestamp(0)
  updated_at         DateTime?      @db.Timestamp(0)
  jobs               jobs           @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_requirement_followers_job_id_foreign")
  socialnetworks     socialnetworks @relation(fields: [socialnetwork_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_requirement_followers_socialnetwork_id_foreign")

  @@index([job_id], map: "job_requirement_followers_job_id_foreign")
  @@index([socialnetwork_id], map: "job_requirement_followers_socialnetwork_id_foreign")
}

model job_role {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  role_id    BigInt?
  job_id     BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model job_types {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  jobs       jobs[]
  lwts       lwts[]
}

model jobitems {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  job_id          BigInt    @db.UnsignedBigInt
  jobitemstype_id BigInt    @db.UnsignedBigInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  quantity        BigInt?   @db.UnsignedBigInt
}

model jobitemtypes {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  name                String                @db.VarChar(255)
  social_id           BigInt                @db.UnsignedBigInt
  order               Int
  deleted_at          DateTime?             @db.Timestamp(0)
  minimum_required    Int?                  @db.TinyInt
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  active_audience     Boolean               @default(false)
  translation_code    String?               @db.VarChar(255)
  audience_post_price audience_post_price[]
}

model jobs {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  title                     String                      @db.VarChar(255)
  user_id                   BigInt
  file_id                   BigInt?
  type                      Int
  location_id               Int?
  requirements              String?                     @db.VarChar(255)
  description               String?                     @db.Text
  will_appear               DateTime                    @db.Date
  deleted_at                DateTime?                   @db.Timestamp(0)
  created_at                DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at                DateTime?                   @default(now()) @db.Timestamp(0)
  collab_type               Int?                        @default(0)
  paid_type                 Int?                        @default(0)
  price_type                Int?                        @default(0)
  price_tbd                 Int?                        @default(0)
  price_min                 Float?                      @default(0)
  price_max                 Float?                      @default(0)
  price_exact               Float?                      @default(0)
  private                   BigInt                      @default(0) @db.UnsignedBigInt
  deleted                   BigInt                      @default(0) @db.UnsignedBigInt
  draft                     BigInt?                     @db.UnsignedBigInt
  draft_publishing          BigInt?                     @db.UnsignedBigInt
  publish_date_start        DateTime?                   @db.Date
  publish_date_end          DateTime?                   @db.Date
  exact                     BigInt?                     @db.UnsignedBigInt
  service_fee               Float                       @default(0)
  transaction_fee           Float?
  card_fee                  Float?
  bank_fee                  Float?
  job_goals_id              BigInt?                     @db.UnsignedBigInt
  total_budget              Float?
  audience_id               BigInt?                     @db.UnsignedBigInt
  job_detail_id             BigInt?                     @db.UnsignedBigInt
  creator_service_fee       Float?
  parent_id                 BigInt?                     @db.UnsignedBigInt
  last_action_at            DateTime?                   @db.Timestamp(0)
  is_pinned                 Boolean?
  campaign_id               BigInt?                     @db.UnsignedBigInt
  is_action_required_brand  Boolean                     @default(false)
  campaign_date_start       String?                     @db.VarChar(255)
  campaign_date_end         String?                     @db.VarChar(255)
  job_type_id               BigInt?                     @db.UnsignedBigInt
  job_type_description      String?                     @db.VarChar(255)
  is_premium                Boolean                     @default(false)
  pulse_user_id             BigInt?                     @db.UnsignedBigInt
  campaign_audio_links      campaign_audio_links[]
  campaign_flavours         campaign_flavours[]
  campaign_video_links      campaign_video_links[]
  job_deliverables          job_deliverables[]
  job_file                  job_file[]
  job_offer_notes           job_offer_notes[]
  job_requirement_followers job_requirement_followers[]
  campaigns                 campaigns?                  @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "jobs_campaign_id_foreign")
  job_goals                 job_goals?                  @relation(fields: [job_goals_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "jobs_job_goals_id_foreign")
  job_types                 job_types?                  @relation(fields: [job_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "jobs_job_type_id_foreign")
  lwts                      lwts[]

  @@index([audience_id], map: "jobs_audience_id_index")
  @@index([campaign_id], map: "jobs_campaign_id_foreign")
  @@index([file_id], map: "jobs_file_id_index")
  @@index([job_goals_id], map: "jobs_job_goals_id_foreign")
  @@index([job_type_id], map: "jobs_job_type_id_index")
  @@index([parent_id], map: "jobs_parent_id_index")
  @@index([title], map: "jobs_title_index")
  @@index([user_id], map: "jobs_user_id_index")
}

model languages {
  id               BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name             String          @db.VarChar(255)
  short            String          @unique(map: "languages_short_unique") @db.VarChar(255)
  deleted_at       DateTime?       @db.Timestamp(0)
  created_at       DateTime?       @default(now()) @db.Timestamp(0)
  updated_at       DateTime?       @default(now()) @db.Timestamp(0)
  translation_code String?         @db.VarChar(255)
  user_language    user_language[]
}

model likes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  post_id    BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model link_published_post_link {
  id                     BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  published_post_link_id BigInt?               @db.UnsignedBigInt
  link_id                BigInt?               @db.UnsignedBigInt
  created_at             DateTime?             @default(now()) @db.Timestamp(0)
  updated_at             DateTime?             @default(now()) @db.Timestamp(0)
  deleted_at             DateTime?             @db.Timestamp(0)
  links                  links?                @relation(fields: [link_id], references: [id], onUpdate: NoAction, map: "link_published_post_link_link_id_foreign")
  published_post_links   published_post_links? @relation(fields: [published_post_link_id], references: [id], onUpdate: NoAction, map: "link_published_post_link_published_post_link_id_foreign")

  @@index([link_id], map: "link_published_post_link_link_id_foreign")
  @@index([published_post_link_id], map: "link_published_post_link_published_post_link_id_foreign")
}

model links {
  id                       BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  url                      String?                    @db.VarChar(255)
  status                   BigInt?
  user_id                  BigInt?
  deleted_at               DateTime?                  @db.Timestamp(0)
  created_at               DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at               DateTime?                  @default(now()) @db.Timestamp(0)
  deliverable_link         deliverable_link[]
  deliverables             deliverables[]
  link_published_post_link link_published_post_link[]
  user_link                user_link[]

  @@index([user_id], map: "links_user_id_index")
}

model live_locations {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  latitude   String?   @db.VarChar(255)
  longitude  String?   @db.VarChar(255)
  name       String?   @db.VarChar(255)
  status     String?   @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  place_id   String?   @db.VarChar(255)
}

model locations {
  id                   BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  latitude             String?               @db.VarChar(255)
  longitude            String?               @db.VarChar(255)
  name                 String?               @db.VarChar(255)
  deleted_at           DateTime?             @db.Timestamp(0)
  created_at           DateTime?             @db.Timestamp(0)
  updated_at           DateTime?             @db.Timestamp(0)
  place_id             String?               @db.VarChar(255)
  city                 String?               @db.VarChar(255)
  state                String?               @db.VarChar(255)
  country              String?               @db.VarChar(255)
  is_latam             Boolean               @default(false)
  is_audience_location Boolean               @default(false)
  iso_code             String?               @db.VarChar(255)
  audience_location    audience_location[]
  audience_post_price  audience_post_price[]
  audiences            audiences[]
  user_location        user_location[]

  @@index([latitude, longitude], map: "locations_lat_lng_index")
  @@index([longitude, latitude], map: "locations_lng_lat_index")
}

model login_codes {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  country_code String    @db.VarChar(5)
  phone        String    @db.VarChar(12)
  code         String    @db.VarChar(255)
  used         Boolean   @default(false)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model lwt_job {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  lwts_id       BigInt?   @db.UnsignedBigInt
  job_id        BigInt?   @db.UnsignedBigInt
  parent_job_id BigInt?   @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)

  @@index([job_id], map: "lwts_job_job_id_indx")
}

model lwt_media {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  lwt_id     BigInt    @db.UnsignedBigInt
  media_id   String    @db.VarChar(255)
  platform   String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  lwts       lwts      @relation(fields: [lwt_id], references: [id], onDelete: Cascade, map: "lwt_media_lwt_id_foreign")

  @@index([lwt_id], map: "lwt_media_lwt_id_foreign")
}

model lwt_reports {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  lwt_id     BigInt?   @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  text       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model lwts {
  id                               BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  sender_id                        BigInt?                @db.UnsignedBigInt
  user_id                          BigInt?                @db.UnsignedBigInt
  status                           Int                    @db.UnsignedInt
  job_id                           BigInt?                @db.UnsignedBigInt
  event_id                         BigInt?                @db.UnsignedBigInt
  deleted_at                       DateTime?              @db.Timestamp(0)
  created_at                       DateTime?              @db.Timestamp(0)
  updated_at                       DateTime?              @db.Timestamp(0)
  chat_id                          BigInt?                @db.UnsignedBigInt
  cancel_id                        BigInt?                @db.UnsignedBigInt
  review_id                        BigInt?                @db.UnsignedBigInt
  comment                          String?                @db.VarChar(255)
  hide_sender                      BigInt?                @db.UnsignedBigInt
  hide_receiver                    BigInt?                @db.UnsignedBigInt
  delete_sender                    BigInt?                @db.UnsignedBigInt
  delete_receiver                  BigInt?                @db.UnsignedBigInt
  deliver_id                       BigInt?                @db.UnsignedBigInt
  request_modification_id          BigInt?                @db.UnsignedBigInt
  final_result_id                  BigInt?                @db.UnsignedBigInt
  tr_token                         String?                @db.VarChar(255)
  reviews_done                     BigInt?                @db.UnsignedBigInt
  is_test                          Boolean                @default(false)
  closed_automatically             Boolean                @default(false)
  is_negotiable                    Boolean                @default(true)
  payment_status                   BigInt                 @db.UnsignedBigInt
  is_invitation                    Boolean?
  has_been_under_negotiation       Boolean                @default(false)
  is_recommended                   Boolean                @default(false)
  payment_release_date             DateTime?              @db.Timestamp(0)
  is_migrated                      Boolean                @default(false)
  creator_advance_fee_config       Float?
  creator_payment_hold_days_config Int?
  payment_on_hold_date             DateTime?              @db.DateTime(0)
  creator_advance_fee_paid         Float?
  recommended_updated_at           DateTime?              @db.DateTime(0)
  is_action_required_brand         Boolean                @default(false)
  is_action_required_creator       Boolean                @default(false)
  collab_gift_sent_at              DateTime?              @db.Date
  title                            String?                @db.VarChar(255)
  file_id                          BigInt?                @db.UnsignedBigInt
  description                      String?                @db.Text
  will_appear                      DateTime?              @db.Date
  price_min                        Float?                 @default(0)
  private                          BigInt                 @default(0) @db.UnsignedBigInt
  publish_date_start               DateTime?              @db.Date
  publish_date_end                 DateTime?              @db.Date
  service_fee                      Float                  @default(0)
  transaction_fee                  Float?
  creator_service_fee              Float?
  job_goals_id                     BigInt?                @db.UnsignedBigInt
  audience_id                      BigInt?                @db.UnsignedBigInt
  job_detail_id                    BigInt?                @db.UnsignedBigInt
  parent_job_id                    BigInt?                @db.UnsignedBigInt
  campaign_id                      BigInt?                @db.UnsignedBigInt
  pulse_user_id                    BigInt?                @db.UnsignedBigInt
  job_type_id                      BigInt?                @db.UnsignedBigInt
  job_type_description             String?                @db.VarChar(255)
  creator_id                       BigInt?                @db.UnsignedBigInt
  brand_id                         BigInt?                @db.UnsignedBigInt
  campaign_audio_links             campaign_audio_links[]
  campaign_video_links             campaign_video_links[]
  deliverables                     deliverables[]
  job_deliverables                 job_deliverables[]
  job_file                         job_file[]
  job_offer_notes                  job_offer_notes[]
  lwt_media                        lwt_media[]
  audiences                        audiences?             @relation(fields: [audience_id], references: [id], onUpdate: NoAction, map: "lwts_audience_id_foreign")
  users_lwts_brand_idTousers       users?                 @relation("lwts_brand_idTousers", fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lwts_brand_id_foreign")
  campaigns                        campaigns?             @relation(fields: [campaign_id], references: [id], onUpdate: NoAction, map: "lwts_campaign_id_foreign")
  users_lwts_creator_idTousers     users?                 @relation("lwts_creator_idTousers", fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lwts_creator_id_foreign")
  files                            files?                 @relation(fields: [file_id], references: [id], onUpdate: NoAction, map: "lwts_file_id_foreign")
  job_details                      job_details?           @relation(fields: [job_detail_id], references: [id], onUpdate: NoAction, map: "lwts_job_detail_id_foreign")
  job_goals                        job_goals?             @relation(fields: [job_goals_id], references: [id], onUpdate: NoAction, map: "lwts_job_goals_id_foreign")
  job_types                        job_types?             @relation(fields: [job_type_id], references: [id], onUpdate: NoAction, map: "lwts_job_type_id_foreign")
  jobs                             jobs?                  @relation(fields: [parent_job_id], references: [id], onUpdate: NoAction, map: "lwts_parent_job_id_foreign")
  pulse_users                      pulse_users?           @relation(fields: [pulse_user_id], references: [id], onUpdate: NoAction, map: "lwts_pulse_user_id_foreign")
  status_lwts                      status_lwts            @relation(fields: [status], references: [status_key], onDelete: NoAction, onUpdate: NoAction, map: "lwts_status_foreign")

  @@index([audience_id], map: "lwts_audience_id_index")
  @@index([brand_id], map: "lwts_brand_id_index")
  @@index([campaign_id], map: "lwts_campaign_id_foreign")
  @@index([chat_id], map: "lwts_chat_id_index")
  @@index([creator_id], map: "lwts_creator_id_index")
  @@index([file_id], map: "lwts_file_id_index")
  @@index([job_detail_id], map: "lwts_job_detail_id_index")
  @@index([job_goals_id], map: "lwts_job_goals_id_index")
  @@index([job_id], map: "lwts_job_id_index")
  @@index([job_type_id], map: "lwts_job_type_id_index")
  @@index([parent_job_id], map: "lwts_parent_job_id_index")
  @@index([payment_status], map: "lwts_payment_status_index")
  @@index([pulse_user_id], map: "lwts_pulse_user_id_foreign")
  @@index([sender_id], map: "lwts_sender_id_index")
  @@index([status], map: "lwts_status_index")
  @@index([user_id], map: "lwts_user_id_index")
}

model lwts_payment_status {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  status_name String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model master_passwords {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  master_password String    @db.VarChar(255)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model media_kit {
  id                           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                      BigInt    @unique(map: "media_kit_user_id_unique") @db.UnsignedBigInt
  current_color                Json?
  brand_logos                  Json?
  created_at                   DateTime? @db.Timestamp(0)
  updated_at                   DateTime? @db.Timestamp(0)
  show_url_link                Boolean   @default(true)
  show_main_audience_countries Boolean   @default(true)
  show_main_audience_ages      Boolean   @default(true)
  show_services_and_rates      Boolean   @default(true)
  user_photos                  Json?
  font                         String?   @db.VarChar(20)
  color_theme                  String?   @db.VarChar(20)
  users                        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "media_kit_user_id_foreign")
}

model message_file {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  message_id BigInt
  file_id    BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([file_id], map: "message_file_file_id_indx")
}

model message_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  message_id BigInt
  link_id    BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model messages {
  id                             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                        BigInt    @default(0)
  chat_id                        BigInt    @default(0)
  body                           String?   @db.Text
  last_updated                   BigInt    @default(0) @db.UnsignedBigInt
  deleted_at                     DateTime? @db.Timestamp(0)
  created_at                     DateTime? @db.Timestamp(0)
  updated_at                     DateTime? @db.Timestamp(0)
  attach_job_id                  BigInt?   @db.UnsignedBigInt
  attach_event_id                BigInt?   @db.UnsignedBigInt
  attach_user_id                 BigInt?   @db.UnsignedBigInt
  attach_link_id                 BigInt?   @db.UnsignedBigInt
  lwt_status                     BigInt?   @db.UnsignedBigInt
  attach_deliver_id              BigInt?   @db.UnsignedBigInt
  attach_request_modification_id BigInt?   @db.UnsignedBigInt
  attach_final_result_id         BigInt?   @db.UnsignedBigInt
  attach_app_event_id            BigInt?   @db.UnsignedBigInt

  @@index([chat_id], map: "message_chat_id")
  @@index([chat_id], map: "messages_chat_id_index")
  @@index([user_id], map: "messages_user_id_index")
}

model metric_source_artists {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  artist_id        BigInt         @db.UnsignedBigInt
  metric_artist_id BigInt         @db.UnsignedBigInt
  metric_source_id BigInt         @db.UnsignedBigInt
  created_at       DateTime?      @default(now()) @db.Timestamp(0)
  updated_at       DateTime?      @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?      @db.Timestamp(0)
  artists          artists        @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "metric_source_artists_artist_id_foreign")
  metric_sources   metric_sources @relation(fields: [metric_source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "metric_source_artists_metric_source_id_foreign")

  @@index([artist_id], map: "metric_source_artists_artist_id_foreign")
  @@index([metric_source_id], map: "metric_source_artists_metric_source_id_foreign")
}

model metric_source_songs {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  song_id          BigInt         @db.UnsignedBigInt
  metric_track_id  BigInt         @db.UnsignedBigInt
  metric_source_id BigInt         @db.UnsignedBigInt
  created_at       DateTime?      @default(now()) @db.Timestamp(0)
  updated_at       DateTime?      @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?      @db.Timestamp(0)
  metric_sources   metric_sources @relation(fields: [metric_source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "metric_source_songs_metric_source_id_foreign")
  songs            songs          @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "metric_source_songs_song_id_foreign")

  @@index([metric_source_id], map: "metric_source_songs_metric_source_id_foreign")
  @@index([song_id], map: "metric_source_songs_song_id_foreign")
}

model metric_sources {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(250)
  created_at            DateTime?               @default(now()) @db.Timestamp(0)
  updated_at            DateTime?               @default(now()) @db.Timestamp(0)
  deleted_at            DateTime?               @db.Timestamp(0)
  metric_source_artists metric_source_artists[]
  metric_source_songs   metric_source_songs[]
}

model migration_test_table {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?   @db.VarChar(200)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @default(now()) @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model monthly_budgets {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model notification_user {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  receiver_id     BigInt
  notification_id BigInt
  read            Int       @default(0) @db.TinyInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([receiver_id], map: "idx_receiver")
  @@index([receiver_id, read], map: "idx_receiver_read")
}

model notifications {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  sender_id        BigInt?
  parent_id        BigInt?
  root_id          BigInt?
  body             String?   @db.Text
  type             Int       @default(0) @db.TinyInt
  last_updated     BigInt    @default(0) @db.UnsignedBigInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  subtype          BigInt?   @db.UnsignedBigInt
  title            String?   @db.Text
  translation_code String?   @db.VarChar(255)
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    BigInt?   @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    BigInt    @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_auth_codes_user_id_index")
}

model oauth_clients {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?   @db.UnsignedBigInt
  name                   String    @db.VarChar(255)
  secret                 String?   @db.VarChar(100)
  provider               String?   @db.VarChar(255)
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model payment_cohorts {
  month  String? @db.VarChar(29)
  cohort Float   @default(0)

  @@ignore
}

model payment_inquiry {
  id                   BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  user_id              BigInt                            @db.UnsignedBigInt
  country              String                            @db.VarChar(255)
  balance              Decimal                           @db.Decimal(10, 2)
  paid                 Boolean?
  date_paid            DateTime?                         @db.DateTime(0)
  paid_amt             Decimal?                          @db.Decimal(10, 2)
  paid_by              BigInt?
  paid_by_name         String?                           @db.VarChar(255)
  payment_provider     payment_inquiry_payment_provider?
  payment_method       payment_inquiry_payment_method?
  payment_method_value String?                           @db.VarChar(255)
  confirmation_id      String?                           @db.VarChar(255)
  duplicate_from       String?                           @db.VarChar(255)
  created_at           DateTime?                         @db.Timestamp(0)
  updated_at           DateTime?                         @db.Timestamp(0)
  deleted_at           DateTime?                         @db.Timestamp(0)
  users                users                             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_inquiry_user_id_foreign")

  @@index([user_id], map: "payment_inquiry_user_id_foreign")
}

model payment_user {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  wallet_id    BigInt?   @db.UnsignedBigInt
  payment_id   BigInt?   @db.UnsignedBigInt
  default      BigInt?   @db.UnsignedBigInt
  for_payment  BigInt?   @db.UnsignedBigInt
  for_get_paid BigInt?   @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model payment_weeks {
  week_start DateTime @id @db.Date
  week_end   String?  @db.VarChar(10)
  week_name  String?  @db.VarChar(44)
}

model payments {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  last_four           String?   @db.VarChar(255)
  type_card           String?   @db.VarChar(255)
  token               String?   @db.VarChar(255)
  date                String?   @db.VarChar(255)
  name                String?   @db.VarChar(255)
  bank_routing_number String?   @db.VarChar(255)
  payment_method      BigInt?   @db.UnsignedBigInt
  get_paid            BigInt?   @db.UnsignedBigInt
  city                String?   @db.VarChar(255)
  state               String?   @db.VarChar(255)
  zip                 String?   @db.VarChar(255)
  selected            BigInt    @default(0) @db.UnsignedBigInt
  deleted_at          String?   @db.VarChar(255)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  holder_type         String?   @db.VarChar(255)
  holder_name         String?   @db.VarChar(255)
  country             String?   @db.VarChar(255)
  verified            BigInt    @default(1) @db.UnsignedBigInt
}

model portfolio_file {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  portfolio_id BigInt    @db.UnsignedBigInt
  file_id      BigInt    @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model portfolio_link {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  portfolio_id BigInt    @db.UnsignedBigInt
  link_id      BigInt    @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model portfolio_user {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  portfolio_id BigInt    @db.UnsignedBigInt
  user_id      BigInt    @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model portfolios {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  title       String?   @db.VarChar(255)
  description String?   @db.Text
  file_id     BigInt?   @db.UnsignedBigInt
  location_id BigInt?   @db.UnsignedBigInt
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model post_file {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  post_id    BigInt    @db.UnsignedBigInt
  file_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([post_id], map: "test_indx")
}

model post_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  post_id    BigInt    @db.UnsignedBigInt
  link_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([post_id], map: "post_link_post_indx")
}

model post_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  post_id    BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model posts {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt                @db.UnsignedBigInt
  comment             String?               @db.Text
  location_id         BigInt?               @db.UnsignedBigInt
  deleted_at          DateTime?             @db.Timestamp(0)
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  attach_job_id       BigInt?               @db.UnsignedBigInt
  attach_event_id     BigInt?               @db.UnsignedBigInt
  attach_user_id      BigInt?               @db.UnsignedBigInt
  attach_link_id      BigInt?               @db.UnsignedBigInt
  live_location_id    Int?
  is_pinned           Boolean?
  fake_fires          BigInt?               @default(0) @db.UnsignedBigInt
  social_feed_reports social_feed_reports[]
}

model premium_cancellation_reasons {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  reason                String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  enabled               Boolean                 @default(true)
  premium_cancellations premium_cancellations[]
}

model premium_cancellations {
  id                           BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                      BigInt                       @db.UnsignedBigInt
  cancel_reason_id             BigInt                       @db.UnsignedBigInt
  additional_text              String?                      @db.Text
  created_at                   DateTime?                    @db.Timestamp(0)
  updated_at                   DateTime?                    @db.Timestamp(0)
  confirmed                    Boolean                      @default(false)
  premium_cancellation_reasons premium_cancellation_reasons @relation(fields: [cancel_reason_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "premium_cancellations_cancel_reason_id_foreign")
  users                        users                        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "premium_cancellations_user_id_foreign")

  @@index([cancel_reason_id], map: "premium_cancellations_cancel_reason_id_foreign")
  @@index([user_id], map: "premium_cancellations_user_id_foreign")
}

model premium_features {
  id                             BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  feature                        String                           @db.VarChar(255)
  app_store_identifier           String                           @db.VarChar(255)
  enabled                        Boolean                          @default(true)
  premium_features_user          premium_features_user[]
  premium_subscription_histories premium_subscription_histories[]
}

model premium_features_user {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  premium_feature_id BigInt           @db.UnsignedBigInt
  user_id            BigInt           @db.UnsignedBigInt
  store              String           @db.VarChar(255)
  created_at         DateTime?        @db.Timestamp(0)
  updated_at         DateTime?        @db.Timestamp(0)
  premium_features   premium_features @relation(fields: [premium_feature_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "premium_features_user_premium_feature_id_foreign")
  users              users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "premium_features_user_user_id_foreign")

  @@index([premium_feature_id], map: "premium_features_user_premium_feature_id_foreign")
  @@index([user_id], map: "premium_features_user_user_id_index")
}

model premium_subscription_histories {
  id                          BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                     BigInt            @db.UnsignedBigInt
  app_user_id                 String?           @db.VarChar(255)
  commission_percentage       Float?
  country_code                String?           @db.VarChar(255)
  currency                    String?           @db.VarChar(255)
  entitlement_id              BigInt?           @db.UnsignedBigInt
  entitlement_ids             Json?
  environment                 String?           @db.VarChar(255)
  event_timestamp_ms          BigInt?
  expiration_at_ms            BigInt?
  offer_code                  String?           @db.VarChar(255)
  original_app_user_id        String?           @db.VarChar(255)
  original_transaction_id     String?           @db.VarChar(255)
  period_type                 String?           @db.VarChar(255)
  presented_offering_id       String?           @db.VarChar(255)
  price                       Float?
  price_in_purchased_currency Float?
  product_id                  String?           @db.VarChar(255)
  purchased_at_ms             BigInt?
  store                       String?           @db.VarChar(255)
  takehome_percentage         Float?
  tax_percentage              Float?
  transaction_id              String?           @db.VarChar(255)
  type                        String?           @db.VarChar(255)
  created_at                  DateTime?         @db.Timestamp(0)
  updated_at                  DateTime?         @db.Timestamp(0)
  premium_features            premium_features? @relation(fields: [entitlement_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_histories_entitlement_id_foreign")
  users                       users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_histories_user_id_foreign")

  @@index([entitlement_id], map: "subscription_histories_entitlement_id_foreign")
  @@index([user_id], map: "subscription_histories_user_id_foreign")
}

model price_regions {
  id     BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  region String @db.VarChar(255)
}

model published_post_links {
  id                       BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  note                     String?                    @db.Text
  deliverable_id           BigInt?                    @db.UnsignedBigInt
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  boost_code               String?                    @db.Text
  file_published_post_link file_published_post_link[]
  link_published_post_link link_published_post_link[]
}

model pulse_list {
  id                      BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  name                    String                   @db.VarChar(255)
  platforms               String?                  @db.VarChar(255)
  pulse_user_id           BigInt?                  @db.UnsignedBigInt
  created_at              DateTime?                @db.Timestamp(0)
  updated_at              DateTime?                @db.Timestamp(0)
  pulse_users             pulse_users?             @relation(fields: [pulse_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pulse_list_pulse_user_id_foreign")
  pulse_list_creator      pulse_list_creator[]
  pulse_list_csat         pulse_list_csat[]
  pulse_list_visibilities pulse_list_visibilities?
  pulse_tasks             pulse_tasks[]

  @@index([pulse_user_id], map: "pulse_list_pulse_user_id_foreign")
}

model pulse_list_access {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  pulse_list_id    BigInt            @db.UnsignedBigInt
  pulse_user_id    BigInt            @db.UnsignedBigInt
  pulse_list_alias String?           @db.VarChar(255)
  password         String?           @db.VarChar(255)
  created_at       DateTime          @default(now()) @db.Timestamp(0)
  updated_at       DateTime          @db.Timestamp(0)
  expires_at       DateTime?         @db.Timestamp(0)
  deleted_at       DateTime?         @db.Timestamp(0)
  pulse_list_csat  pulse_list_csat[]
}

model pulse_list_activities {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  pulse_user_id   BigInt?   @db.UnsignedBigInt
  pulse_access_id BigInt?   @db.UnsignedBigInt
  comment         String    @db.Text
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  pulse_list_id   BigInt?   @db.UnsignedBigInt
  user_id         BigInt?   @db.UnsignedBigInt
  users           users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "pulse_list_activities_user_id_foreign")

  @@index([pulse_list_id], map: "pulse_list_activities_pulse_list_id_foreign")
  @@index([pulse_user_id], map: "pulse_list_activities_pulse_user_id_foreign")
  @@index([user_id], map: "pulse_list_activities_user_id_foreign")
}

model pulse_list_creator {
  id                              BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  pulse_list_id                   BigInt?                                @db.UnsignedBigInt
  user_id                         BigInt?                                @db.UnsignedBigInt
  total_cost                      Float?
  cpv_indicator                   Float?
  cpm_indicator                   Float?
  cpe_indicator                   Float?
  cpc_indicator                   Float?
  edited_fields                   Json?
  task_id                         BigInt?                                @db.UnsignedBigInt
  estimated_rate                  Decimal?                               @db.Decimal(10, 2)
  location_info                   Json?
  tiktok_info                     Json?
  instagram_info                  Json?
  youtube_info                    Json?
  created_at                      DateTime?                              @default(now()) @db.Timestamp(0)
  updated_at                      DateTime?                              @default(now()) @db.Timestamp(0)
  userInfo                        Json?
  creator_state                   pulse_list_creator_creator_state       @default(pending)
  instagram_user_insights_id      Int?                                   @db.UnsignedInt
  instagram_audiences_insights_id BigInt?                                @db.UnsignedBigInt
  tiktok_user_insights_id         Int?                                   @db.UnsignedInt
  tiktok_audiences_insights_id    BigInt?                                @db.UnsignedBigInt
  youtube_user_insights_id        Int?                                   @db.UnsignedInt
  youtube_audiences_insights_id   BigInt?                                @db.UnsignedBigInt
  recommended_by_charly           Boolean                                @default(false)
  send_charly_status              pulse_list_creator_send_charly_status?
  deleted_at                      DateTime?                              @db.Timestamp(0)
  instagram_audiences_insights    instagram_audiences_insights?          @relation(fields: [instagram_audiences_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_instagram_audiences_insights_id_foreign")
  instagram_user_insights         instagram_user_insights?               @relation(fields: [instagram_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_instagram_user_insights_id_foreign")
  pulse_list                      pulse_list?                            @relation(fields: [pulse_list_id], references: [id], onUpdate: NoAction, map: "pulse_list_creator_pulse_list_id_foreign")
  pulse_tasks                     pulse_tasks?                           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_task_id_foreign")
  tiktok_audiences_insights       tiktok_audiences_insights?             @relation(fields: [tiktok_audiences_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_tiktok_audiences_insights_id_foreign")
  tiktok_user_insights            tiktok_user_insights?                  @relation(fields: [tiktok_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_tiktok_user_insights_id_foreign")
  users                           users?                                 @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "pulse_list_creator_user_id_foreign")
  youtube_audiences_insights      youtube_audiences_insights?            @relation(fields: [youtube_audiences_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_youtube_audiences_insights_id_foreign")
  youtube_user_insights           youtube_user_insights?                 @relation(fields: [youtube_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_list_creator_youtube_user_insights_id_foreign")

  @@unique([pulse_list_id, user_id], map: "pulse_list_creator_pulse_list_id_user_id_unique")
  @@index([instagram_audiences_insights_id], map: "pulse_list_creator_instagram_audiences_insights_id_foreign")
  @@index([instagram_user_insights_id], map: "pulse_list_creator_instagram_user_insights_id_foreign")
  @@index([task_id], map: "pulse_list_creator_task_id_foreign")
  @@index([tiktok_audiences_insights_id], map: "pulse_list_creator_tiktok_audiences_insights_id_foreign")
  @@index([tiktok_user_insights_id], map: "pulse_list_creator_tiktok_user_insights_id_foreign")
  @@index([user_id], map: "pulse_list_creator_user_id_foreign")
  @@index([youtube_audiences_insights_id], map: "pulse_list_creator_youtube_audiences_insights_id_foreign")
  @@index([youtube_user_insights_id], map: "pulse_list_creator_youtube_user_insights_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pulse_list_csat {
  id                   BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  pulse_list_id        BigInt            @db.UnsignedBigInt
  pulse_list_access_id BigInt            @db.UnsignedBigInt
  score                Int
  comment              String?           @db.Text
  created_at           DateTime          @default(now()) @db.DateTime(0)
  updated_at           DateTime?         @default(now()) @db.DateTime(0)
  deleted_at           DateTime?         @db.DateTime(0)
  pulse_list           pulse_list        @relation(fields: [pulse_list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pulse_list_csat_ibfk_1")
  pulse_list_access    pulse_list_access @relation(fields: [pulse_list_access_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pulse_list_csat_ibfk_2")

  @@index([pulse_list_access_id], map: "pulse_list_access_id")
  @@index([pulse_list_id], map: "pulse_list_id")
}

model pulse_list_visibilities {
  id                                           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  pulse_list_id                                BigInt     @unique(map: "uq_pulse_list_id") @db.UnsignedBigInt
  is_total_cost_summary_visible                Boolean?   @default(true)
  is_creator_count_summary_visible             Boolean?   @default(true)
  is_follower_count_summary_visible            Boolean?   @default(true)
  is_estimated_views_summary_visible           Boolean?   @default(true)
  is_estimated_engagement_rate_summary_visible Boolean?   @default(true)
  is_estimated_cpv_summary_visible             Boolean?   @default(true)
  is_estimated_cpm_summary_visible             Boolean?   @default(true)
  is_estimated_cpe_summary_visible             Boolean?   @default(true)
  is_estimated_cpc_summary_visible             Boolean?   @default(true)
  is_location_creator_visible                  Boolean?   @default(true)
  is_total_cost_creator_visible                Boolean?   @default(true)
  is_cpv_creator_visible                       Boolean?   @default(true)
  is_cpm_creator_visible                       Boolean?   @default(true)
  is_cpe_creator_visible                       Boolean?   @default(true)
  is_cpc_creator_visible                       Boolean?   @default(true)
  is_follower_count_creator_visible            Boolean?   @default(true)
  is_engagement_rate_creator_visible           Boolean?   @default(true)
  is_views_creator_visible                     Boolean?   @default(true)
  is_audience_countries_creator_visible        Boolean?   @default(true)
  is_audience_gender_creator_visible           Boolean?   @default(true)
  is_audience_age_ranges_creator_visible       Boolean?   @default(true)
  created_at                                   DateTime   @default(now()) @db.DateTime(0)
  updated_at                                   DateTime?  @default(now()) @db.DateTime(0)
  deleted_at                                   DateTime?  @db.DateTime(0)
  pulse_list                                   pulse_list @relation(fields: [pulse_list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pulse_list_visibilities_ibfk_1")
}

model pulse_tasks {
  id                          BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  pulse_user_id               BigInt               @db.UnsignedBigInt
  task_id                     String               @db.VarChar(255)
  payload                     Json?
  response                    Json?
  status                      pulse_tasks_status   @default(pending)
  response_time               BigInt?              @db.UnsignedBigInt
  created_at                  DateTime             @default(now()) @db.Timestamp(0)
  updated_at                  DateTime             @default(now()) @db.Timestamp(0)
  total_elapse_time           BigInt?              @db.UnsignedBigInt
  orchestrator_execution_time BigInt?              @db.UnsignedBigInt
  pulse_list_id               BigInt?              @db.UnsignedBigInt
  pulse_list_creator          pulse_list_creator[]
  pulse_list                  pulse_list?          @relation(fields: [pulse_list_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_tasks_pulse_list_id_foreign")
  pulse_users                 pulse_users          @relation(fields: [pulse_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pulse_tasks_pulse_user_id_foreign")

  @@index([pulse_list_id], map: "pulse_tasks_pulse_list_id_foreign")
  @@index([pulse_user_id], map: "pulse_tasks_pulse_user_id_foreign")
}

model pulse_users {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  name               String?              @db.VarChar(255)
  email              String               @db.VarChar(255)
  image              String?              @db.VarChar(255)
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  deleted_at         DateTime?            @db.Timestamp(0)
  country            String?              @db.VarChar(255)
  password           String               @db.VarChar(255)
  lwts               lwts[]
  pulse_list         pulse_list[]
  pulse_tasks        pulse_tasks[]
  song_user_tracking song_user_tracking[]
}

model queue {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved     Int    @default(0) @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue, reserved, reserved_at], map: "queue_queue_reserved_reserved_at_index")
}

model rate_package_deliverables {
  id                          BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  quantity                    Int                       @db.SmallInt
  content_deliverable_type_id BigInt                    @db.UnsignedBigInt
  rate_package_id             BigInt                    @db.UnsignedBigInt
  created_at                  DateTime                  @default(now()) @db.Timestamp(0)
  updated_at                  DateTime                  @default(now()) @db.Timestamp(0)
  deleted_at                  DateTime?                 @db.Timestamp(0)
  content_deliverable_types   content_deliverable_types @relation(fields: [content_deliverable_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_package_deliverables_content_deliverable_type_id_foreign")
  rate_packages               rate_packages             @relation(fields: [rate_package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_package_deliverables_rate_package_id_foreign")

  @@index([content_deliverable_type_id], map: "rate_package_deliverables_content_deliverable_type_id_foreign")
  @@index([created_at], map: "rate_package_deliverables_created_at_IDX")
  @@index([rate_package_id], map: "rate_package_deliverables_rate_package_id_foreign")
  @@index([updated_at], map: "rate_package_deliverables_updated_at_IDX")
}

model rate_package_types {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  type          String          @unique(map: "rate_package_types_type_unique") @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  deleted_at    DateTime?       @db.Timestamp(0)
  rate_packages rate_packages[]
}

model rate_packages {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  name                      String                      @db.VarChar(255)
  price                     Decimal                     @db.Decimal(8, 2)
  note                      String?                     @db.Text
  rate_package_type_id      BigInt                      @db.UnsignedBigInt
  user_id                   BigInt                      @db.UnsignedBigInt
  created_at                DateTime                    @default(now()) @db.Timestamp(0)
  updated_at                DateTime                    @default(now()) @db.Timestamp(0)
  deleted_at                DateTime?                   @db.Timestamp(0)
  rate_package_deliverables rate_package_deliverables[]
  rate_package_types        rate_package_types          @relation(fields: [rate_package_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_packages_rate_package_type_id_foreign")
  users                     users                       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_packages_user_id_foreign")

  @@index([created_at], map: "rate_packages_created_at_IDX")
  @@index([rate_package_type_id], map: "rate_packages_rate_package_type_id_foreign")
  @@index([updated_at], map: "rate_packages_updated_at_IDX")
  @@index([user_id], map: "rate_packages_user_id_foreign")
}

model record_labels {
  id                  BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  name                String               @db.VarChar(255)
  user_id             BigInt?              @db.UnsignedBigInt
  parent_id           BigInt?              @db.UnsignedBigInt
  created_at          DateTime?            @default(now()) @db.Timestamp(0)
  updated_at          DateTime?            @default(now()) @db.Timestamp(0)
  deleted_at          DateTime?            @db.Timestamp(0)
  albums              albums[]
  artists             artists[]
  users               users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "record_labels_ibfk_1")
  record_labels       record_labels?       @relation("record_labelsTorecord_labels", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "record_labels_ibfk_2")
  other_record_labels record_labels[]      @relation("record_labelsTorecord_labels")
  song_record_labels  song_record_labels[]

  @@index([parent_id], map: "parent_id")
  @@index([user_id], map: "user_id")
}

model referral_codes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  code       String?   @db.VarChar(255)
  is_used    Boolean   @default(false)
  owner_id   BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  used_by    BigInt?   @db.UnsignedBigInt
}

model regional_top_charts {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  song_id         BigInt    @db.UnsignedBigInt
  chart_country   String    @db.VarChar(200)
  chart_frequency String    @db.VarChar(200)
  rank            Int       @db.UnsignedInt
  rank_last_week  Int       @db.UnsignedInt
  rank_peak       Int       @db.UnsignedInt
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  deleted_at      DateTime? @db.Timestamp(0)
  songs           songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "regional_top_charts_song_id_foreign")

  @@index([song_id], map: "regional_top_charts_song_id_foreign")
}

model request_file {
  id                      BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  request_modification_id BigInt?   @db.UnsignedBigInt
  file_id                 BigInt?   @db.UnsignedBigInt
  created_at              DateTime? @db.Timestamp(0)
  updated_at              DateTime? @db.Timestamp(0)
}

model request_link {
  id                      BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  request_modification_id BigInt?   @db.UnsignedBigInt
  link_id                 BigInt?   @db.UnsignedBigInt
  created_at              DateTime? @db.Timestamp(0)
  updated_at              DateTime? @db.Timestamp(0)
}

model request_modifications {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  text       String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model review_file {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  review_id  BigInt    @db.UnsignedBigInt
  file_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model review_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  review_id  BigInt    @db.UnsignedBigInt
  link_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model reviews {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  text        String?   @db.Text
  link_id     BigInt?   @db.UnsignedBigInt
  user_id     BigInt?   @db.UnsignedBigInt
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  rating      BigInt    @default(1) @db.UnsignedBigInt
  lwts_id     BigInt?   @db.UnsignedBigInt
  result_text String?   @db.Text
}

model roles {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name             String    @db.VarChar(255)
  deleted          Int       @default(0) @db.TinyInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  translation_code String?   @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sales_nonorganic_jobs {
  job_created_at      DateTime? @db.DateTime(0)
  job_id              String?   @db.Text
  job_title           String?   @db.Text
  privacy             String?   @db.Text
  brand_userid        BigInt?
  brand_username      String?   @db.Text
  brand_email         String?   @db.Text
  is_brand            BigInt?
  brand_user_position String?   @db.Text
  brand_rep_by        String?   @db.Text
  brand_sales_rep     String?   @db.Text
  brand_sales_rep_id  Float?
  referral_code       String?   @db.Text
  owner_id            Float?
  owner_name          String?   @db.Text
  code_used_date      DateTime? @db.DateTime(0)
  owner_id_2          Float?
  owner_name_2        String?   @db.Text
  owner_id_3          Float?
  owner_name_3        String?   @db.Text
  is_managed          BigInt?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sales_organic_jobs {
  Job_Created_Date     DateTime? @db.DateTime(0)
  Job_Id               String?   @db.Text
  Job_Title            String?   @db.Text
  Privacy              String?   @db.Text
  Brand_Userid         BigInt?
  Brand_Username       String?   @db.Text
  Brand_Email          String?   @db.Text
  Is_Brand             BigInt?
  Brand_User_Position  String?   @db.Text
  Brand_Rep            String?   @db.Text
  Influur_Sales_Rep    String?   @db.Text
  Influur_Sales_Rep_Id Float?
  Referral_Code        String?   @db.Text
  Code_Used_Date       DateTime? @db.DateTime(0)
  Code_Owner_Id        Float?
  Code_Owner_Name      String?   @db.Text
  Code_Owner_Id_2      Float?
  Code_Owner_2         String?   @db.Text
  Code_Owner_Id_3      Float?
  Code_Owner_3         String?   @db.Text

  @@ignore
}

model service_fee_exceptions_users {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  added_by   String    @db.VarChar(255)
  user_id    BigInt    @db.UnsignedBigInt
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  percent    Decimal   @default(0.0000) @db.Decimal(5, 4)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_fee_exceptions_users_user_id_foreign")

  @@index([user_id], map: "service_fee_exceptions_users_user_id_foreign")
}

model slack_channels {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt    @db.UnsignedBigInt
  slack_channel_id String    @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

model social_feed_reports {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  reason     String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  post_id    BigInt?   @db.UnsignedBigInt
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "social_feed_reports_post_id_foreign")
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "social_feed_reports_user_id_foreign")

  @@index([post_id], map: "social_feed_reports_post_id_foreign")
  @@index([user_id], map: "social_feed_reports_user_id_foreign")
}

model socialnetworks {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  name                      String                      @db.VarChar(255)
  order                     Int
  deleted_at                DateTime?                   @db.Timestamp(0)
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  active_audience           Boolean                     @default(false)
  translation_code          String?                     @db.VarChar(255)
  content_deliverable_types content_deliverable_types[]
  job_requirement_followers job_requirement_followers[]
  user_content_types        user_content_types[]
}

model song_csv_files {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  csv_file_bucket_url     String                    @db.VarChar(512)
  file_status             String                    @db.VarChar(255)
  song_id                 BigInt                    @db.UnsignedBigInt
  file_name               String                    @db.VarChar(255)
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  deleted_at              DateTime?                 @db.Timestamp(0)
  campaign_name           String?                   @db.VarChar(255)
  user_id                 BigInt?                   @db.UnsignedBigInt
  instagram_content_price instagram_content_price[]
  songs                   songs                     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_csv_files_ibfk_1")
  tiktok_content_price    tiktok_content_price[]
  youtube_content_price   youtube_content_price[]

  @@index([song_id], map: "song_id")
}

model song_genres {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  song_id    BigInt    @db.UnsignedBigInt
  genre_id   BigInt    @db.UnsignedBigInt
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  genres     genres    @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_genre_genre_id_foreign")
  songs      songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_genre_song_id_foreign")

  @@index([genre_id], map: "song_genre_genre_id_foreign")
  @@index([song_id], map: "song_genre_song_id_foreign")
}

model song_record_labels {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  song_id         BigInt        @db.UnsignedBigInt
  record_label_id BigInt        @db.UnsignedBigInt
  created_at      DateTime?     @default(now()) @db.Timestamp(0)
  updated_at      DateTime?     @default(now()) @db.Timestamp(0)
  deleted_at      DateTime?     @db.Timestamp(0)
  record_labels   record_labels @relation(fields: [record_label_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_record_labels_record_label_id_foreign")
  songs           songs         @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_record_labels_song_id_foreign")

  @@index([record_label_id], map: "song_record_labels_record_label_id_foreign")
  @@index([song_id], map: "song_record_labels_song_id_foreign")
}

model song_tiktok_sound_insights {
  id                                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tiktok_top_video_comments           BigInt    @db.UnsignedBigInt
  tiktok_top_video_likes              BigInt    @db.UnsignedBigInt
  tiktok_top_video_views              BigInt    @db.UnsignedBigInt
  tiktok_total_ugcs                   BigInt    @db.UnsignedBigInt
  created_at                          DateTime? @default(now()) @db.Timestamp(0)
  updated_at                          DateTime? @default(now()) @db.Timestamp(0)
  deleted_at                          DateTime? @db.Timestamp(0)
  song_id                             BigInt    @db.UnsignedBigInt
  weekly_tiktok_total_ugcs            BigInt
  weekly_tiktok_total_ugcs_percentage Float     @db.Float
  songs                               songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_tiktok_sound_insights_song_id_foreign")

  @@index([song_id], map: "song_tiktok_sound_insights_song_id_foreign")
}

model song_tiktok_sounds {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  song_id         BigInt        @db.UnsignedBigInt
  tiktok_sound_id BigInt        @db.UnsignedBigInt
  created_at      DateTime?     @default(now()) @db.Timestamp(0)
  updated_at      DateTime?     @default(now()) @db.Timestamp(0)
  deleted_at      DateTime?     @db.Timestamp(0)
  songs           songs         @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_tiktok_sound_song_id_foreign")
  tiktok_sounds   tiktok_sounds @relation(fields: [tiktok_sound_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_tiktok_sound_tiktok_sound_id_foreign")

  @@index([song_id], map: "song_tiktok_sound_song_id_foreign")
  @@index([tiktok_sound_id], map: "song_tiktok_sound_tiktok_sound_id_foreign")
}

model song_user_tracking {
  id          BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt      @db.UnsignedBigInt
  song_id     BigInt      @db.UnsignedBigInt
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  deleted_at  DateTime?   @db.Timestamp(0)
  songs       songs       @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_user_tracking_song_id_foreign")
  pulse_users pulse_users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "song_user_tracking_user_id_foreign")

  @@index([song_id], map: "song_user_tracking_song_id_foreign")
  @@index([user_id], map: "song_user_tracking_user_id_foreign")
}

model songs {
  id                             BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  name                           String                           @db.VarChar(255)
  release_date                   DateTime                         @db.Timestamp(0)
  campaign_id                    BigInt?                          @db.UnsignedBigInt
  created_at                     DateTime?                        @default(now()) @db.Timestamp(0)
  updated_at                     DateTime?                        @default(now()) @db.Timestamp(0)
  deleted_at                     DateTime?                        @db.Timestamp(0)
  isrc                           String?                          @db.VarChar(200)
  background_media               String?                          @db.VarChar(1024)
  album_songs                    album_songs[]
  artist_song                    artist_song[]
  metric_source_songs            metric_source_songs[]
  regional_top_charts            regional_top_charts[]
  song_csv_files                 song_csv_files[]
  song_genres                    song_genres[]
  song_record_labels             song_record_labels[]
  song_tiktok_sound_insights     song_tiktok_sound_insights[]
  song_tiktok_sounds             song_tiktok_sounds[]
  song_user_tracking             song_user_tracking[]
  spotify_song_insights          spotify_song_insights[]
  spotify_song_playlist_insights spotify_song_playlist_insights[]
  spotify_weekly_global_charts   spotify_weekly_global_charts[]
  tiktok_sound_top_videos        tiktok_sound_top_videos[]
}

model spotify_artist_insights {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  spotify_id String    @unique(map: "spotify_id") @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  artists    artists[]
}

model spotify_playlist_insights {
  id                             BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  spotify_playlist_id            String                           @unique(map: "spotify_playlist_id") @db.VarChar(255)
  name                           String?                          @db.VarChar(255)
  description                    String?                          @db.Text
  editorial                      Boolean?
  country                        String?                          @db.VarChar(255)
  num_tracks                     Int?                             @db.UnsignedInt
  followers                      Int?                             @db.UnsignedInt
  followers_diff_week            Int?                             @db.UnsignedInt
  followers_diff_month           Int?                             @db.UnsignedInt
  created_at                     DateTime?                        @default(now()) @db.Timestamp(0)
  updated_at                     DateTime?                        @default(now()) @db.Timestamp(0)
  deleted_at                     DateTime?                        @db.Timestamp(0)
  is_active                      Boolean?
  last_updated                   DateTime?                        @db.DateTime(0)
  sys_last_updated               DateTime?                        @db.Date
  spotify_song_playlist_insights spotify_song_playlist_insights[]
}

model spotify_song_insights {
  id                                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  spotify_id                        String    @unique(map: "spotify_id") @db.VarChar(255)
  streams                           BigInt?   @db.UnsignedBigInt
  created_at                        DateTime? @default(now()) @db.Timestamp(0)
  updated_at                        DateTime? @default(now()) @db.Timestamp(0)
  deleted_at                        DateTime? @db.Timestamp(0)
  spotify_popularity                Float?    @db.Float
  number_spotify_playlist           Int?      @db.UnsignedInt
  number_spotify_editorial_playlist Int?      @db.UnsignedInt
  spotify_duration_ms               Float?    @db.Float
  spotify_playlist_total_reach      BigInt?   @db.UnsignedBigInt
  song_id                           BigInt    @db.UnsignedBigInt
  weekly_streams                    BigInt?
  weekly_streams_percentage         Float?    @db.Float
  songs                             songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spotify_song_insights_song_id_foreign")

  @@index([song_id], map: "spotify_song_insights_song_id_foreign")
}

model spotify_song_playlist_insights {
  id                           BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  spotify_playlist_insights_id BigInt                    @db.UnsignedBigInt
  song_id                      BigInt                    @db.UnsignedBigInt
  position                     Int?                      @db.UnsignedInt
  peak_position                Int?                      @db.UnsignedInt
  track_added_at               DateTime?                 @db.Date
  created_at                   DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at                   DateTime?                 @default(now()) @db.Timestamp(0)
  deleted_at                   DateTime?                 @db.Timestamp(0)
  songs                        songs                     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spotify_song_playlist_insights_song_id_foreign")
  spotify_playlist_insights    spotify_playlist_insights @relation(fields: [spotify_playlist_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sspi_spotify_playlist_insights_id_foreign")

  @@index([song_id], map: "spotify_song_playlist_insights_song_id_foreign")
  @@index([spotify_playlist_insights_id], map: "sspi_spotify_playlist_insights_id_foreign")
}

model spotify_weekly_global_charts {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  song_id        BigInt    @db.UnsignedBigInt
  rank           Int?      @db.UnsignedInt
  rank_last_week Int?      @db.UnsignedInt
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
  songs          songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spotify_weekly_global_charts_song_id_foreign")

  @@index([song_id], map: "spotify_weekly_global_charts_song_id_foreign")
}

model status_creators_waitlist {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  status_name       String              @db.VarChar(255)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  creators_waitlist creators_waitlist[]
}

model status_lwts {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  status_name String?   @db.VarChar(255)
  status_key  Int       @unique
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  lwts        lwts[]

  @@index([status_key], map: "status_lwts_status_key_index")
}

model status_transactions {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  status_name String?   @db.VarChar(255)
  status_key  Int
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([status_key], map: "status_transactions_status_key_index")
}

model subscription_items {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  subscription_id BigInt    @db.UnsignedBigInt
  stripe_id       String    @db.VarChar(255)
  stripe_product  String    @db.VarChar(255)
  stripe_price    String    @db.VarChar(255)
  quantity        Int?
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@unique([subscription_id, stripe_price], map: "subscription_items_subscription_id_stripe_price_unique")
  @@index([stripe_id], map: "subscription_items_stripe_id_index")
}

model subscriptions {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt    @db.UnsignedBigInt
  name          String    @db.VarChar(255)
  stripe_id     String    @db.VarChar(255)
  stripe_status String    @db.VarChar(255)
  stripe_price  String?   @db.VarChar(255)
  quantity      Int?
  trial_ends_at DateTime? @db.Timestamp(0)
  ends_at       DateTime? @db.Timestamp(0)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)

  @@index([user_id, stripe_status], map: "subscriptions_user_id_stripe_status_index")
}

model test_migrations_table {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model tiktok_audiences_insights {
  id                                BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                           BigInt               @unique(map: "tiktok_audiences_insights_user_id_unique") @db.UnsignedBigInt
  top_media_1_id                    String?              @db.VarChar(255)
  top_media_2_id                    String?              @db.VarChar(255)
  top_media_3_id                    String?              @db.VarChar(255)
  commercial_media_1_id             String?              @db.VarChar(255)
  commercial_media_2_id             String?              @db.VarChar(255)
  commercial_media_3_id             String?              @db.VarChar(255)
  country_1                         String?              @db.VarChar(255)
  country_1_weight                  Float?
  country_2                         String?              @db.VarChar(255)
  country_2_weight                  Float?
  country_3                         String?              @db.VarChar(255)
  country_3_weight                  Float?
  city_1                            String?              @db.VarChar(255)
  city_1_weight                     Float?
  city_2                            String?              @db.VarChar(255)
  city_2_weight                     Float?
  city_3                            String?              @db.VarChar(255)
  city_3_weight                     Float?
  language_1                        String?              @db.VarChar(255)
  language_1_weight                 Float?
  language_2                        String?              @db.VarChar(255)
  language_2_weight                 Float?
  language_3                        String?              @db.VarChar(255)
  language_3_weight                 Float?
  interest_1                        String?              @db.VarChar(255)
  interest_2                        String?              @db.VarChar(255)
  interest_3                        String?              @db.VarChar(255)
  top_hashtag_1                     String?              @db.VarChar(255)
  top_hashtag_1_weight              Float?
  top_hashtag_2                     String?              @db.VarChar(255)
  top_hashtag_2_weight              Float?
  top_hashtag_3                     String?              @db.VarChar(255)
  top_hashtag_3_weight              Float?
  similar_user_1                    String?              @db.VarChar(255)
  similar_user_1_weight             Float?
  similar_user_2                    String?              @db.VarChar(255)
  similar_user_2_weight             Float?
  similar_user_3                    String?              @db.VarChar(255)
  similar_user_3_weight             Float?
  audience_type_1                   String?              @db.VarChar(255)
  audience_type_1_weight            Float?
  audience_type_2                   String?              @db.VarChar(255)
  audience_type_2_weight            Float?
  audience_type_3                   String?              @db.VarChar(255)
  audience_type_3_weight            Float?
  audience_ethnicity_1              String?              @db.VarChar(255)
  audience_ethnicity_1_weight       Float?
  audience_ethnicity_2              String?              @db.VarChar(255)
  audience_ethnicity_2_weight       Float?
  audience_ethnicity_3              String?              @db.VarChar(255)
  audience_ethnicity_3_weight       Float?
  audience_brand_affinity_1         String?              @db.VarChar(255)
  audience_brand_affinity_1_weight  Float?
  audience_brand_affinity_2         String?              @db.VarChar(255)
  audience_brand_affinity_2_weight  Float?
  audience_brand_affinity_3         String?              @db.VarChar(255)
  audience_brand_affinity_3_weight  Float?
  audience_male_weight              Float?
  audience_female_weight            Float?
  audience_ages_male_13_17_weight   Float?
  audience_ages_female_13_17_weight Float?
  audience_ages_male_18_24_weight   Float?
  audience_ages_female_18_24_weight Float?
  audience_ages_male_25_34_weight   Float?
  audience_ages_female_25_34_weight Float?
  audience_ages_male_35_44_weight   Float?
  audience_ages_female_35_44_weight Float?
  audience_ages_male_45_64_weight   Float?
  audience_ages_female_45_64_weight Float?
  audience_ages_male_65_            Float?
  audience_ages_female_65_          Float?
  created_at                        DateTime?            @db.Timestamp(0)
  updated_at                        DateTime?            @db.Timestamp(0)
  tiktok_user_insights_id           Int                  @db.UnsignedInt
  pulse_list_creator                pulse_list_creator[]
  tiktok_user_insights              tiktok_user_insights @relation(fields: [tiktok_user_insights_id], references: [id], onDelete: Cascade, map: "tiktok_audiences_insights_tiktok_user_insights_FK")

  @@index([created_at], map: "tiktok_audiences_insights_created_at_IDX")
  @@index([tiktok_user_insights_id], map: "tiktok_audiences_insights_tiktok_user_insights_FK")
  @@index([updated_at], map: "tiktok_audiences_insights_updated_at_IDX")
}

model tiktok_campaign_audio_links_insights {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  external_source_id     String    @db.VarChar(255)
  title                  String?   @db.VarChar(100)
  url                    String    @db.VarChar(255)
  video_count            BigInt?   @db.UnsignedBigInt
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)
  campaign_audio_link_id BigInt    @db.UnsignedBigInt
}

model tiktok_comments_insights {
  id                       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id               String    @unique(map: "tiktok_comments_insights_comment_id_unique") @db.VarChar(255)
  media_id                 String    @db.VarChar(255)
  date_posted              DateTime? @db.DateTime(0)
  handle                   String?   @db.VarChar(255)
  like_count               Int?      @db.UnsignedInt
  reply_comment_count      Int?      @db.UnsignedInt
  text                     String?   @db.VarChar(150)
  deleted_at               DateTime? @db.Timestamp(0)
  created_at               DateTime? @db.Timestamp(0)
  updated_at               DateTime? @db.Timestamp(0)
  tiktok_media_insights_id Int       @db.UnsignedInt
}

model tiktok_content_price {
  id                       BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  song_csv_file_id         BigInt                @db.UnsignedBigInt
  price                    Float
  is_valid_link            Boolean               @default(false)
  tiktok_media_insights_id String                @db.VarChar(255)
  created_at               DateTime?             @default(now()) @db.Timestamp(0)
  updated_at               DateTime?             @default(now()) @db.Timestamp(0)
  deleted_at               DateTime?             @db.Timestamp(0)
  song_csv_files           song_csv_files        @relation(fields: [song_csv_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tiktok_content_price_ibfk_1")
  tiktok_media_insights    tiktok_media_insights @relation(fields: [tiktok_media_insights_id], references: [media_id], onDelete: NoAction, onUpdate: NoAction, map: "tiktok_content_price_ibfk_2")

  @@index([song_csv_file_id], map: "song_csv_file_id")
  @@index([tiktok_media_insights_id], map: "tiktok_media_insights_id")
}

model tiktok_media_insights {
  media_id                String                    @id @db.VarChar(255)
  description             String?                   @db.VarChar(1024)
  date_posted             DateTime?                 @db.DateTime(0)
  url                     String?                   @db.VarChar(500)
  thumbnail_url           String?                   @db.VarChar(500)
  music                   String?                   @db.VarChar(500)
  like_count              Int?                      @db.UnsignedInt
  comment_count           Int?                      @db.UnsignedInt
  play_count              Int?                      @db.UnsignedInt
  save                    Int?                      @db.UnsignedInt
  share_count             Int?                      @db.UnsignedInt
  user_id                 Int                       @db.UnsignedInt
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  retrieved_url           String?                   @db.VarChar(500)
  tiktok_user_insights_id Int                       @db.UnsignedInt
  deleted_at              DateTime?                 @db.Timestamp(0)
  tiktok_content_price    tiktok_content_price[]
  tiktok_sound_top_videos tiktok_sound_top_videos[]

  @@index([created_at], map: "tiktok_media_insights_created_at_IDX")
  @@index([updated_at], map: "tiktok_media_insights_updated_at_IDX")
  @@index([user_id], map: "tiktok_media_insights_user_id_index")
}

model tiktok_sound_top_videos {
  id                       BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  song_id                  BigInt                @db.UnsignedBigInt
  tiktok_media_insights_id String                @db.VarChar(255)
  tiktok_sound_id          BigInt                @db.UnsignedBigInt
  influencer_country       String?               @db.VarChar(200)
  created_at               DateTime?             @default(now()) @db.Timestamp(0)
  updated_at               DateTime?             @default(now()) @db.Timestamp(0)
  deleted_at               DateTime?             @db.Timestamp(0)
  songs                    songs                 @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tiktok_top_videos_audios_song_id_foreign")
  tiktok_media_insights    tiktok_media_insights @relation(fields: [tiktok_media_insights_id], references: [media_id], onDelete: NoAction, onUpdate: NoAction, map: "tiktok_top_videos_audios_tiktok_media_insights_id_foreign")
  tiktok_sounds            tiktok_sounds         @relation(fields: [tiktok_sound_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tiktok_top_videos_audios_tiktok_sound_id_foreign")

  @@index([song_id], map: "tiktok_top_videos_audios_song_id_foreign")
  @@index([tiktok_media_insights_id], map: "tiktok_top_videos_audios_tiktok_media_insights_id_foreign")
  @@index([tiktok_sound_id], map: "tiktok_top_videos_audios_tiktok_sound_id_foreign")
}

model tiktok_sounds {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  sound_id                String                    @db.VarChar(200)
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  deleted_at              DateTime?                 @db.Timestamp(0)
  song_tiktok_sounds      song_tiktok_sounds[]
  tiktok_sound_top_videos tiktok_sound_top_videos[]
}

model tiktok_user_additional_info {
  id                      BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  handle                  String                @db.VarChar(255)
  tiktok_user_insights_id Int?                  @db.UnsignedInt
  gender                  String?               @db.VarChar(255)
  location                String?               @db.VarChar(255)
  industries              String?               @db.VarChar(255)
  characteristics         String?               @db.VarChar(255)
  rate_sound              Float?
  agency                  String?               @db.VarChar(255)
  comments                String?               @db.VarChar(255)
  created_at              DateTime?             @db.Timestamp(0)
  updated_at              DateTime?             @db.Timestamp(0)
  tiktok_user_insights    tiktok_user_insights? @relation(fields: [tiktok_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tiktok_user_additional_info_tiktok_user_insights_id_foreign")

  @@index([tiktok_user_insights_id], map: "tiktok_user_additional_info_tiktok_user_insights_id_foreign")
}

model tiktok_user_insights {
  user_id                            Int?                          @unique(map: "user_id") @db.UnsignedInt
  tiktok_user_id                     BigInt?                       @db.UnsignedBigInt
  handle                             String                        @db.VarChar(50)
  followers                          BigInt                        @db.UnsignedBigInt
  following                          BigInt?                       @db.UnsignedBigInt
  avg_views                          Float?                        @db.Float
  engagement_rate                    Float?                        @db.Float
  is_influur_verified                Boolean
  meets_influur_criteria             Boolean
  id                                 Int                           @id @default(autoincrement()) @db.UnsignedInt
  created_at                         DateTime?                     @default(now()) @db.DateTime(0)
  updated_at                         DateTime?                     @default(now()) @db.DateTime(0)
  is_handle_not_found                Boolean                       @default(false)
  avg_likes                          Float?                        @db.Float
  avg_comments                       Float?                        @db.Float
  avg_saves                          Float?                        @db.Float
  avg_shares                         Float?                        @db.Float
  is_fan                             Boolean                       @default(false)
  external_user_id                   String?                       @db.VarChar(50)
  biography                          String?                       @db.VarChar(150)
  platform_token                     String?                       @db.VarChar(512)
  is_media_and_follower_insufficient Boolean                       @default(false)
  refresh_token                      String?                       @db.VarChar(255)
  deleted_at                         DateTime?                     @db.Timestamp(0)
  pulse_list_creator                 pulse_list_creator[]
  tiktok_audiences_insights          tiktok_audiences_insights[]
  tiktok_user_additional_info        tiktok_user_additional_info[]
  users                              users[]

  @@index([created_at], map: "tiktok_user_insights_created_at_IDX")
  @@index([updated_at], map: "tiktok_user_insights_updated_at_IDX")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tpv_confirmed_2022 {
  id               BigInt?
  transaction_id   String?   @db.Text
  lwt_id           Float?
  title            String?   @db.Text
  type             String?   @db.Text
  job_event_id     Float?
  status           BigInt?
  from_user_id     BigInt?
  from_user_name   String?   @db.Text
  to_user_id       Float?
  to_user_name     String?   @db.Text
  total            Float?
  instant_transfer Float?
  date             DateTime? @db.DateTime(0)
  created_at       DateTime? @db.DateTime(0)
  updated_at       DateTime? @db.DateTime(0)
  subtotal         Float?
  time             String?   @db.Text
  service_fee      Float?
  transaction_fee  Float?
  tpv              String?   @db.Text
  week             String?   @db.Text

  @@ignore
}

model transaction_wallet {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  wallet_id      BigInt?   @db.UnsignedBigInt
  transaction_id BigInt?   @db.UnsignedBigInt
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model transactions {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  transaction_id      String?   @db.VarChar(255)
  status              BigInt?   @db.UnsignedBigInt
  from_user_id        BigInt?   @db.UnsignedBigInt
  to_user_id          BigInt?   @db.UnsignedBigInt
  total               String?   @db.VarChar(255)
  instant_transfer    BigInt?   @db.UnsignedBigInt
  date                String?   @db.VarChar(255)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  subtotal            String?   @db.VarChar(255)
  time                String?   @db.VarChar(255)
  standart_transfer   BigInt?   @db.UnsignedBigInt
  job_id              BigInt?   @db.UnsignedBigInt
  event_id            BigInt?   @db.UnsignedBigInt
  service_fee         Float?
  payment_type        String?   @db.VarChar(255)
  last4               BigInt?   @db.UnsignedBigInt
  activity            BigInt?   @db.UnsignedBigInt
  transaction_fee     Float?
  lwt_id              BigInt?   @db.UnsignedBigInt
  transaction_type    String?   @db.VarChar(255)
  is_test             Boolean   @default(false)
  creator_service_fee Float?
}

model trending {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  rank       Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "trending_user_id_foreign")

  @@index([user_id], map: "trending_user_id_foreign")
}

model user_audit_logs {
  id         BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  ip         String                 @db.VarChar(45)
  uri        String                 @db.VarChar(255)
  source     user_audit_logs_source
  user_id    BigInt?                @db.UnsignedBigInt
  data       Json?
  created_at DateTime               @default(now()) @db.Timestamp(0)
  updated_at DateTime?              @db.Timestamp(0)
}

model user_content_types {
  id                          BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  external_media_id           String                     @db.VarChar(255)
  picture_url                 String?                    @db.VarChar(1024)
  video_url                   String?                    @db.VarChar(1024)
  socialnetwork_id            BigInt?                    @db.UnsignedBigInt
  user_id                     BigInt?                    @db.UnsignedBigInt
  campaign_video_link_type_id BigInt?                    @db.UnsignedBigInt
  created_at                  DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at                  DateTime?                  @default(now()) @db.Timestamp(0)
  deleted_at                  DateTime?                  @db.Timestamp(0)
  campaign_video_link_types   campaign_video_link_types? @relation(fields: [campaign_video_link_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_content_types_campaign_video_link_type_id_foreign")
  socialnetworks              socialnetworks?            @relation(fields: [socialnetwork_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_content_types_socialnetwork_id_foreign")
  users                       users?                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_content_types_user_id_foreign")

  @@index([campaign_video_link_type_id], map: "user_content_types_campaign_video_link_type_id_foreign")
  @@index([socialnetwork_id], map: "user_content_types_socialnetwork_id_foreign")
  @@index([user_id], map: "user_content_types_user_id_foreign")
}

model user_industry {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt     @db.UnsignedBigInt
  industry_id BigInt     @db.UnsignedBigInt
  percentage  Float?
  deleted_at  DateTime?  @db.Timestamp(0)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  updated_at  DateTime?  @default(now()) @db.Timestamp(0)
  industries  industries @relation(fields: [industry_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_industry_industry_id_foreign")
  users       users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_industry_user_id_foreign")

  @@index([user_id], map: "idx_userIndustry_user_id")
  @@index([industry_id], map: "industry_id_indx")
}

model user_language {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  language_id BigInt    @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  languages   languages @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_language_language_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_language_user_id_foreign")

  @@index([user_id], map: "idx_userLanguage_user_id")
  @@index([language_id], map: "user_language_language_id_foreign")
}

model user_link {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  link_id    BigInt    @db.UnsignedBigInt
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  links      links     @relation(fields: [link_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_link_link_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_link_user_id_foreign")

  @@index([link_id], map: "user_link_link_id_foreign")
  @@index([user_id], map: "user_link_user_id_foreign")
}

model user_location {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  location_id BigInt    @db.UnsignedBigInt
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  locations   locations @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_location_location_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_location_user_id_foreign")

  @@index([location_id], map: "user_location_location_id_foreign")
  @@index([user_id], map: "user_location_user_id_foreign")
}

model user_location_types {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  location_type_name String?   @db.VarChar(255)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
}

model user_locations {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id               BigInt?   @db.UnsignedBigInt
  location_id           BigInt?   @db.UnsignedBigInt
  user_location_type_id BigInt?   @db.UnsignedBigInt
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)

  @@index([user_id], map: "idx_userLocations_user_id")
}

model user_responsiveness {
  id                       BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  score                    Float                    @db.Float
  total_evaluated          BigInt                   @db.UnsignedBigInt
  user_id                  BigInt                   @db.UnsignedBigInt
  type_id                  BigInt                   @db.UnsignedBigInt
  calculated_from_date     DateTime                 @default(now()) @db.Timestamp(0)
  created_at               DateTime?                @default(now()) @db.Timestamp(0)
  updated_at               DateTime?                @default(now()) @db.Timestamp(0)
  deleted_at               DateTime?                @db.Timestamp(0)
  user_responsiveness_type user_responsiveness_type @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_responsiveness_type_id_foreign")
  users                    users                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_responsiveness_user_id_foreign")

  @@unique([user_id, type_id], map: "user_responsiveness_user_id_type_id_unique")
  @@index([type_id], map: "user_responsiveness_type_id_foreign")
}

model user_responsiveness_type {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  name                String                @unique(map: "name") @db.VarChar(255)
  created_at          DateTime?             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  deleted_at          DateTime?             @db.Timestamp(0)
  user_responsiveness user_responsiveness[]
}

model user_settings {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @unique(map: "user_settings_user_id_unique")
  collabs    Int?
  price      Int?
  paid_ad    Int?
  deleted    Int       @default(0) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model users {
  id                                BigInt                              @id @default(autoincrement()) @db.UnsignedBigInt
  user_name                         String                              @unique(map: "users_user_name_unique") @db.VarChar(255)
  first_name                        String?                             @db.VarChar(255)
  last_name                         String?                             @db.VarChar(255)
  full_name                         String?                             @db.VarChar(255)
  email                             String?                             @db.VarChar(255)
  gender                            String?                             @db.VarChar(255)
  phone_number                      String?                             @db.VarChar(255)
  birthday                          DateTime                            @db.Date
  about                             String?                             @db.VarChar(255)
  password                          String?                             @db.VarChar(255)
  tik_tok_token                     String?                             @unique(map: "users_tik_tok_token_unique") @db.VarChar(255)
  role_id                           BigInt
  file_id                           BigInt?
  instagram_token                   String?                             @unique(map: "users_instagram_token_unique") @db.VarChar(255)
  facebook_token                    String?                             @unique(map: "users_facebook_token_unique") @db.VarChar(255)
  apple_token                       String?                             @unique(map: "users_apple_token_unique") @db.VarChar(255)
  deleted_at                        DateTime?                           @db.Timestamp(0)
  remember_token                    String?                             @db.VarChar(100)
  created_at                        DateTime?                           @db.Timestamp(0)
  updated_at                        DateTime?                           @db.Timestamp(0)
  cover_image_id                    BigInt?                             @db.UnsignedBigInt
  admin                             Int?                                @db.UnsignedInt
  brand                             Int?                                @default(0)
  company_size_min                  Int?
  company_size_max                  Int?
  paid                              Int?
  symbol                            Int?
  age                               Int?
  price                             Int?
  collabs                           Int                                 @default(0)
  company_position                  String?                             @db.VarChar(255)
  how_did_you_hear_about_us         String?                             @db.VarChar(255)
  live_location_id                  Int?
  certificated                      BigInt                              @default(0) @db.UnsignedBigInt
  verification_code                 String?                             @db.VarChar(255)
  verified                          Int                                 @default(0)
  phone_iso                         String?                             @db.VarChar(255)
  influencer                        BigInt?                             @db.UnsignedBigInt
  creator                           BigInt?                             @db.UnsignedBigInt
  location_id                       BigInt?                             @db.UnsignedBigInt
  push_notifications                BigInt                              @default(1) @db.UnsignedBigInt
  stripe_id                         String?                             @db.VarChar(255)
  pm_type                           String?                             @db.VarChar(255)
  pm_last_four                      String?                             @db.VarChar(4)
  trial_ends_at                     DateTime?                           @db.Timestamp(0)
  website                           String?                             @db.VarChar(255)
  description                       String?                             @db.Text
  ein                               String?                             @db.VarChar(255)
  date_birth                        String?                             @db.VarChar(255)
  company_name                      String?                             @db.VarChar(255)
  ssn                               String?                             @db.VarChar(255)
  wallet_account_id                 BigInt?                             @db.UnsignedBigInt
  is_test                           Boolean                             @default(false)
  represented_by                    String?                             @db.VarChar(255)
  sales_representative              String?                             @db.VarChar(255)
  sales_representative_id           BigInt?
  is_complete                       Boolean                             @default(false)
  app_version                       String?                             @db.VarChar(255)
  referral_code_id                  BigInt?                             @db.UnsignedBigInt
  retention_name                    String?                             @db.VarChar(255)
  retention_id                      BigInt?                             @db.UnsignedBigInt
  acquisition_name                  String?                             @db.VarChar(255)
  acquisition_id                    BigInt?                             @db.UnsignedBigInt
  last_active                       DateTime?                           @db.Timestamp(0)
  youtube_verified_at               DateTime?                           @db.DateTime(0)
  tiktok_verified_at                DateTime?                           @db.DateTime(0)
  instagram_verified_at             DateTime?                           @db.DateTime(0)
  profile_completed                 Boolean                             @default(false)
  monthly_budget_id                 BigInt?                             @db.UnsignedBigInt
  monthly_budget_other_txt          String?                             @db.Text
  meets_social_criteria             Boolean                             @default(false)
  is_creators_fee_acknowledged      Boolean                             @default(false)
  last_lwt_offer_accepted           DateTime?                           @db.DateTime(0)
  last_lwt_offer_received           DateTime?                           @db.DateTime(0)
  is_app_reviewed                   Boolean                             @default(false)
  is_ghost                          Boolean                             @default(false)
  headline                          String?                             @db.VarChar(120)
  website_title                     String?                             @db.VarChar(120)
  instagram_user_insights_id        Int?                                @db.UnsignedInt
  tiktok_user_insights_id           Int?                                @db.UnsignedInt
  youtube_user_insights_id          Int?                                @db.UnsignedInt
  show_link_social_networks_modal   Boolean                             @default(true)
  created_by_pulse_user_id          Int?                                @db.UnsignedInt
  is_influur_managed                Boolean                             @default(false)
  brands_home_curated_list_creators brands_home_curated_list_creators[]
  job_offer_notes                   job_offer_notes[]
  lwts_lwts_brand_idTousers         lwts[]                              @relation("lwts_brand_idTousers")
  lwts_lwts_creator_idTousers       lwts[]                              @relation("lwts_creator_idTousers")
  media_kit                         media_kit?
  payment_inquiry                   payment_inquiry[]
  premium_cancellations             premium_cancellations[]
  premium_features_user             premium_features_user[]
  premium_subscription_histories    premium_subscription_histories[]
  pulse_list_activities             pulse_list_activities[]
  pulse_list_creator                pulse_list_creator[]
  rate_packages                     rate_packages[]
  record_labels                     record_labels[]
  service_fee_exceptions_users      service_fee_exceptions_users[]
  social_feed_reports               social_feed_reports[]
  trending                          trending[]
  user_content_types                user_content_types[]
  user_industry                     user_industry[]
  user_language                     user_language[]
  user_link                         user_link[]
  user_location                     user_location[]
  user_responsiveness               user_responsiveness[]
  instagram_user_insights           instagram_user_insights?            @relation(fields: [instagram_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_instagram_user_insights_id_foreign")
  tiktok_user_insights              tiktok_user_insights?               @relation(fields: [tiktok_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_tiktok_user_insights_id_foreign")
  youtube_user_insights             youtube_user_insights?              @relation(fields: [youtube_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_youtube_user_insights_id_foreign")

  @@index([file_id], map: "users_file_id_index")
  @@index([instagram_user_insights_id], map: "users_instagram_user_insights_id_foreign")
  @@index([location_id], map: "users_loc_indx")
  @@index([role_id], map: "users_role_id_index")
  @@index([stripe_id], map: "users_stripe_id_index")
  @@index([tiktok_user_insights_id], map: "users_tiktok_user_insights_id_foreign")
  @@index([user_name], map: "users_user_name_index")
  @@index([youtube_user_insights_id], map: "users_youtube_user_insights_id_foreign")
}

model users_report {
  id                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id              BigInt    @unique(map: "users_report_user_id_unique") @db.UnsignedBigInt
  user_name            String    @db.VarChar(255)
  full_name            String?   @db.VarChar(255)
  email                String?   @db.VarChar(255)
  phone_number         String?   @db.VarChar(255)
  gender               String?   @db.VarChar(255)
  brand                Boolean?
  verified             Boolean   @default(false)
  collabs              Boolean   @default(false)
  paid_ad              Boolean?
  lwt_count            Int?
  price                String?   @db.VarChar(255)
  last_location        String?   @db.VarChar(255)
  last_live_location   String?   @db.VarChar(255)
  is_test              Boolean   @default(false)
  user_created_at      DateTime? @db.DateTime(0)
  tiktok_followers     String?   @db.VarChar(255)
  instagram_followers  String?   @db.VarChar(255)
  facebook_followers   String?   @db.VarChar(255)
  youtube_followers    String?   @db.VarChar(255)
  company_position     String?   @db.VarChar(255)
  company_size_min     Int?
  company_size_max     Int?
  amount_earned        Decimal   @default(0.00) @db.Decimal(14, 2)
  amount_spent         Decimal   @default(0.00) @db.Decimal(14, 2)
  profile_pic          String?   @db.VarChar(255)
  cover_image          String?   @db.VarChar(255)
  birthday             String?   @db.VarChar(255)
  sales_representative String?   @db.VarChar(255)
  deleted              Boolean   @default(false)
  app_version          String?   @db.VarChar(255)
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
  deleted_at           DateTime? @db.Timestamp(0)
  role_id              BigInt?
  first_name           String?   @db.VarChar(255)
  last_name            String?   @db.VarChar(255)

  @@index([user_id, user_name, email], map: "users_report_user_id_user_name_email_index")
}

model verification_texts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  text       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model verifications {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  verification_code String?   @db.VarChar(255)
  phone_number      BigInt?
  email             String?   @db.VarChar(255)
  verified          Int       @default(0)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  type              String    @default("REGISTRATION") @db.VarChar(255)
  device_token      String?   @db.VarChar(255)
  attempts          Int       @default(0) @db.SmallInt
  expires_at        DateTime? @db.DateTime(0)
}

model wallet_accounts {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  website            String?   @db.VarChar(255)
  country            String?   @db.VarChar(255)
  user_id            BigInt?   @db.UnsignedBigInt
  business_type      String?   @db.VarChar(255)
  email              String?   @db.VarChar(255)
  city               String?   @db.VarChar(255)
  line1              String?   @db.VarChar(255)
  line2              String?   @db.VarChar(255)
  zip                String?   @db.VarChar(255)
  state              String?   @db.VarChar(255)
  first_name         String?   @db.VarChar(255)
  last_name          String?   @db.VarChar(255)
  payment_acc        String?   @db.VarChar(255)
  stripe_id          String?   @db.VarChar(255)
  phone              String?   @db.VarChar(255)
  description        String?   @db.Text
  ein                String?   @db.VarChar(255)
  date_birth         String?   @db.VarChar(255)
  company_name       String?   @db.VarChar(255)
  ssn                String?   @db.VarChar(255)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  balance            Float?
  is_express_account Boolean?  @default(false)
}

model youtube_audiences_insights {
  id                                BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                           BigInt                @unique(map: "youtube_audiences_insights_user_id_unique") @db.UnsignedBigInt
  top_media_1_id                    String?               @db.VarChar(255)
  top_media_2_id                    String?               @db.VarChar(255)
  top_media_3_id                    String?               @db.VarChar(255)
  commercial_media_1_id             String?               @db.VarChar(255)
  commercial_media_2_id             String?               @db.VarChar(255)
  commercial_media_3_id             String?               @db.VarChar(255)
  country_1                         String?               @db.VarChar(255)
  country_1_weight                  Float?
  country_2                         String?               @db.VarChar(255)
  country_2_weight                  Float?
  country_3                         String?               @db.VarChar(255)
  country_3_weight                  Float?
  city_1                            String?               @db.VarChar(255)
  city_1_weight                     Float?
  city_2                            String?               @db.VarChar(255)
  city_2_weight                     Float?
  city_3                            String?               @db.VarChar(255)
  city_3_weight                     Float?
  language_1                        String?               @db.VarChar(255)
  language_1_weight                 Float?
  language_2                        String?               @db.VarChar(255)
  language_2_weight                 Float?
  language_3                        String?               @db.VarChar(255)
  language_3_weight                 Float?
  interest_1                        String?               @db.VarChar(255)
  interest_2                        String?               @db.VarChar(255)
  interest_3                        String?               @db.VarChar(255)
  top_hashtag_1                     String?               @db.VarChar(255)
  top_hashtag_1_weight              Float?
  top_hashtag_2                     String?               @db.VarChar(255)
  top_hashtag_2_weight              Float?
  top_hashtag_3                     String?               @db.VarChar(255)
  top_hashtag_3_weight              Float?
  similar_user_1                    String?               @db.VarChar(255)
  similar_user_1_weight             Float?
  similar_user_2                    String?               @db.VarChar(255)
  similar_user_2_weight             Float?
  similar_user_3                    String?               @db.VarChar(255)
  similar_user_3_weight             Float?
  audience_type_1                   String?               @db.VarChar(255)
  audience_type_1_weight            Float?
  audience_type_2                   String?               @db.VarChar(255)
  audience_type_2_weight            Float?
  audience_type_3                   String?               @db.VarChar(255)
  audience_type_3_weight            Float?
  audience_ethnicity_1              String?               @db.VarChar(255)
  audience_ethnicity_1_weight       Float?
  audience_ethnicity_2              String?               @db.VarChar(255)
  audience_ethnicity_2_weight       Float?
  audience_ethnicity_3              String?               @db.VarChar(255)
  audience_ethnicity_3_weight       Float?
  audience_brand_affinity_1         String?               @db.VarChar(255)
  audience_brand_affinity_1_weight  Float?
  audience_brand_affinity_2         String?               @db.VarChar(255)
  audience_brand_affinity_2_weight  Float?
  audience_brand_affinity_3         String?               @db.VarChar(255)
  audience_brand_affinity_3_weight  Float?
  audience_male_weight              Float?
  audience_female_weight            Float?
  audience_ages_male_13_17_weight   Float?
  audience_ages_female_13_17_weight Float?
  audience_ages_male_18_24_weight   Float?
  audience_ages_female_18_24_weight Float?
  audience_ages_male_25_34_weight   Float?
  audience_ages_female_25_34_weight Float?
  audience_ages_male_35_44_weight   Float?
  audience_ages_female_35_44_weight Float?
  audience_ages_male_45_64_weight   Float?
  audience_ages_female_45_64_weight Float?
  audience_ages_male_65_            Float?
  audience_ages_female_65_          Float?
  created_at                        DateTime?             @db.Timestamp(0)
  updated_at                        DateTime?             @db.Timestamp(0)
  youtube_user_insights_id          Int                   @db.UnsignedInt
  pulse_list_creator                pulse_list_creator[]
  youtube_user_insights             youtube_user_insights @relation(fields: [youtube_user_insights_id], references: [id], onDelete: Cascade, map: "youtube_audiences_insights_youtube_user_insights_FK")

  @@index([created_at], map: "youtube_audiences_insights_created_at_IDX")
  @@index([updated_at], map: "youtube_audiences_insights_updated_at_IDX")
  @@index([youtube_user_insights_id], map: "youtube_audiences_insights_youtube_user_insights_FK")
}

model youtube_campaign_audio_links_insights {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  external_source_id     String    @db.VarChar(255)
  title                  String?   @db.VarChar(100)
  url                    String    @db.VarChar(255)
  description            String?   @db.VarChar(1000)
  genre                  String?   @db.VarChar(50)
  view_count             BigInt?   @db.UnsignedBigInt
  like_count             BigInt?   @db.UnsignedBigInt
  comment_count          BigInt?   @db.UnsignedBigInt
  date_posted            DateTime? @db.DateTime(0)
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)
  campaign_audio_link_id BigInt    @db.UnsignedBigInt
}

model youtube_comments_insights {
  id                        BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id                String    @unique(map: "youtube_comments_insights_comment_id_unique") @db.VarChar(255)
  media_id                  String    @db.VarChar(255)
  date_posted               DateTime? @db.DateTime(0)
  handle                    String?   @db.VarChar(255)
  like_count                Int?      @db.UnsignedInt
  reply_comment_count       Int?      @db.UnsignedInt
  text                      String?   @db.VarChar(1500)
  deleted_at                DateTime? @db.Timestamp(0)
  created_at                DateTime? @db.Timestamp(0)
  updated_at                DateTime? @db.Timestamp(0)
  youtube_media_insights_id Int       @db.UnsignedInt
}

model youtube_content_price {
  id                        BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  song_csv_file_id          BigInt                 @db.UnsignedBigInt
  price                     Float
  is_valid_link             Boolean                @default(false)
  youtube_media_insights_id String                 @db.VarChar(255)
  created_at                DateTime?              @default(now()) @db.Timestamp(0)
  updated_at                DateTime?              @default(now()) @db.Timestamp(0)
  deleted_at                DateTime?              @db.Timestamp(0)
  song_csv_files            song_csv_files         @relation(fields: [song_csv_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "youtube_content_price_ibfk_1")
  youtube_media_insights    youtube_media_insights @relation(fields: [youtube_media_insights_id], references: [media_id], onDelete: NoAction, onUpdate: NoAction, map: "youtube_content_price_ibfk_2")

  @@index([song_csv_file_id], map: "song_csv_file_id")
  @@index([youtube_media_insights_id], map: "youtube_media_insights_id")
}

model youtube_media_insights {
  media_id                 String                  @id @db.VarChar(255)
  url                      String?                 @db.VarChar(500)
  thumbnail_url            String?                 @db.VarChar(500)
  view_count               Int?                    @db.UnsignedInt
  like_count               Int?                    @db.UnsignedInt
  dislike_count            Int?                    @db.UnsignedInt
  favorite_count           Int?                    @db.UnsignedInt
  comment_count            Int?                    @db.UnsignedInt
  date_posted              DateTime?               @db.DateTime(0)
  user_id                  Int                     @db.UnsignedInt
  created_at               DateTime?               @default(now()) @db.Timestamp(0)
  updated_at               DateTime?               @default(now()) @db.Timestamp(0)
  retrieved_url            String?                 @db.VarChar(500)
  title                    String?                 @db.VarChar(100)
  description              String?                 @db.VarChar(1024)
  genre                    String?                 @db.VarChar(50)
  youtube_user_insights_id Int                     @db.UnsignedInt
  deleted_at               DateTime?               @db.Timestamp(0)
  youtube_content_price    youtube_content_price[]

  @@index([created_at], map: "youtube_media_insights_created_at_IDX")
  @@index([updated_at], map: "youtube_media_insights_updated_at_IDX")
  @@index([user_id], map: "youtube_media_insights_user_id_index")
}

model youtube_user_additional_info {
  id                       BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  handle                   String                 @db.VarChar(255)
  youtube_user_insights_id Int?                   @db.UnsignedInt
  gender                   String?                @db.VarChar(255)
  location                 String?                @db.VarChar(255)
  industries               String?                @db.VarChar(255)
  characteristics          String?                @db.VarChar(255)
  rate_preroll             Float?
  rate_dedicated_video     Float?
  rate_short               Float?
  agency                   String?                @db.VarChar(255)
  comments                 String?                @db.VarChar(255)
  created_at               DateTime?              @db.Timestamp(0)
  updated_at               DateTime?              @db.Timestamp(0)
  youtube_user_insights    youtube_user_insights? @relation(fields: [youtube_user_insights_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "youtube_user_additional_info_youtube_user_insights_id_foreign")

  @@index([youtube_user_insights_id], map: "youtube_user_additional_info_youtube_user_insights_id_foreign")
}

model youtube_user_insights {
  user_id                            Int?                           @unique(map: "user_id") @db.UnsignedInt
  youtube_channel_id                 String?                        @db.VarChar(50)
  handle                             String                         @db.VarChar(50)
  followers                          BigInt                         @db.UnsignedBigInt
  videos                             Int?                           @db.UnsignedInt
  video_views                        BigInt?                        @db.UnsignedBigInt
  avg_views                          Float?                         @db.Float
  is_influur_verified                Boolean
  meets_influur_criteria             Boolean
  id                                 Int                            @id @default(autoincrement()) @db.UnsignedInt
  created_at                         DateTime?                      @default(now()) @db.DateTime(0)
  updated_at                         DateTime?                      @default(now()) @db.DateTime(0)
  is_handle_not_found                Boolean                        @default(false)
  avg_likes                          Float?                         @db.Float
  avg_comments                       Float?                         @db.Float
  engagement_rate                    Float?                         @db.Float
  is_fan                             Boolean                        @default(false)
  external_user_id                   String?                        @db.VarChar(50)
  biography                          String?                        @db.VarChar(150)
  platform_token                     String?                        @db.VarChar(512)
  refresh_token                      String?                        @db.VarChar(255)
  is_media_and_follower_insufficient Boolean                        @default(false)
  deleted_at                         DateTime?                      @db.Timestamp(0)
  pulse_list_creator                 pulse_list_creator[]
  users                              users[]
  youtube_audiences_insights         youtube_audiences_insights[]
  youtube_user_additional_info       youtube_user_additional_info[]

  @@index([created_at], map: "youtube_user_insights_created_at_IDX")
  @@index([updated_at], map: "youtube_user_insights_updated_at_IDX")
}

enum data_waitlist_total_user_type {
  influencer_creator
  brand
}

enum user_audit_logs_source {
  ADMIN
  API
}

enum pulse_tasks_status {
  pending
  successful
  failed
}

enum payment_inquiry_payment_provider {
  zelle
  paypal
}

enum payment_inquiry_payment_method {
  phone
  email
}

enum pulse_list_creator_creator_state {
  approved
  disapproved
  pending
}

enum pulse_list_creator_send_charly_status {
  sent
  returned
  reused
}
